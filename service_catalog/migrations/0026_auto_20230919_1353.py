# Generated by Django 3.2.13 on 2023-09-19 11:53

from django.db import migrations, models


def move_name_in_variable(apps, schema_editor):
    TowerSurveyField = apps.get_model('service_catalog', 'TowerSurveyField')
    for survey_field in TowerSurveyField.objects.all():
        survey_field.variable = survey_field.name
        survey_field.save()


def update_all_operation_survey(apps, schema_editor):
    Operation = apps.get_model('service_catalog', 'Operation')
    TowerSurveyField = apps.get_model('service_catalog', 'TowerSurveyField')
    for operation in Operation.objects.all():
        if operation.job_template is not None:
            spec_list = operation.job_template.survey.get("spec", [])
            for field in spec_list:
                squest_field, created = TowerSurveyField.objects.get_or_create(
                    variable=field['variable'],
                    operation__id=operation.id,
                    defaults={
                        'is_customer_field': True,
                        'name': field['question_name'],
                        'description': field['question_description'],
                        'type': field['type'],
                        'required': field['required'],
                        'field_options': {
                            'min': field['min'],
                            'max': field['max'],
                            'choices': field['choices'],
                            'default': field['default']
                        }
                    }
                )
                if not created:
                    squest_field.name = field['question_name']
                    squest_field.description = field['question_description']
                    squest_field.type = field['type']
                    squest_field.required = field['required']
                    squest_field.field_options = {
                        "min": field['min'],
                        "max": field['max'],
                        "choices": field['choices'],
                        "default": field['default']
                    }
                    squest_field.save()
            operation.tower_survey_fields.exclude(
                variable__in=[survey_spec["variable"] for survey_spec in spec_list]).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('service_catalog', '0025_alter_approvalstep_auto_accept_condition'),
    ]

    operations = [
        migrations.AddField(
            model_name='towersurveyfield',
            name='description',
            field=models.CharField(default='', max_length=500),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='towersurveyfield',
            name='field_options',
            field=models.JSONField(default={}),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='towersurveyfield',
            name='required',
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='towersurveyfield',
            name='type',
            field=models.CharField(default='', max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='towersurveyfield',
            name='variable',
            field=models.CharField(default='', max_length=200),
            preserve_default=False,
        ),
        migrations.RunPython(move_name_in_variable),
        migrations.AlterField(
            model_name='towersurveyfield',
            name='name',
            field=models.CharField(max_length=200),
        ),
        migrations.AlterUniqueTogether(
            name='towersurveyfield',
            unique_together={('operation', 'variable')},
        ),
        migrations.AlterField(
            model_name='towersurveyfield',
            name='is_customer_field',
            field=models.BooleanField(default=True, help_text='Display for non approver user'),
        ),
        migrations.RunPython(update_all_operation_survey),
    ]
