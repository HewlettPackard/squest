# Generated by Django 3.2.13 on 2023-09-12 14:52

from django.db import migrations, models


def hook_split_migration(apps, schema_editor):
    GlobalHook = apps.get_model('service_catalog', 'GlobalHook')
    InstanceHook = apps.get_model('service_catalog', 'InstanceHook')
    RequestHook = apps.get_model('service_catalog', 'RequestHook')
    for request_hook in GlobalHook.objects.filter(model="Request"):
        new_request_hook = RequestHook.objects.create(
            name=request_hook.name,
            state=request_hook.state,
            job_template=request_hook.job_template,
            extra_vars=request_hook.extra_vars,
        )
        new_request_hook.operations.add(request_hook.operation)
    for instance_hook in GlobalHook.objects.filter(model="Instance"):
        new_instance_hook = InstanceHook.objects.create(
            name=instance_hook.name,
            state=instance_hook.state,
            job_template=instance_hook.job_template,
            extra_vars=instance_hook.extra_vars,
        )
        new_instance_hook.services.add(instance_hook.service)


class Migration(migrations.Migration):

    dependencies = [
        ('service_catalog', '0023_auto_20230912_1524'),
    ]

    operations = [
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 1 WHERE state = "SUBMITTED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 2 WHERE state = "NEED_INFO";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 3 WHERE state = "REJECTED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 4 WHERE state = "CANCELED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 5 WHERE state = "ACCEPTED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 6 WHERE state = "PROCESSING";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 7 WHERE state = "COMPLETE";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 8 WHERE state = "FAILED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 9 WHERE state = "ARCHIVED";'),

        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 1 WHERE state = "SUBMITTED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 1 WHERE state = "PENDING";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 2 WHERE state = "PROVISION_FAILED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 3 WHERE state = "PROVISIONING";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 4 WHERE state = "UPDATING";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 5 WHERE state = "UPDATE_FAILED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 6 WHERE state = "DELETING";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 7 WHERE state = "DELETED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 8 WHERE state = "DELETE_FAILED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 9 WHERE state = "ARCHIVED";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 10 WHERE state = "AVAILABLE";'),
        migrations.RunSQL('UPDATE service_catalog_globalhook SET state = 11 WHERE state = "ABORTED";'),
        migrations.CreateModel(
            name='InstanceHook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('extra_vars', models.JSONField(blank=True, default=dict)),
                ('state', models.IntegerField(
                    choices=[(1, 'PENDING'), (2, 'PROVISION_FAILED'), (3, 'PROVISIONING'), (4, 'UPDATING'),
                             (5, 'UPDATE_FAILED'), (6, 'DELETING'), (7, 'DELETED'), (8, 'DELETE_FAILED'),
                             (9, 'ARCHIVED'), (10, 'AVAILABLE'), (11, 'ABORTED')])),
                ('job_template',
                 models.ForeignKey(on_delete=models.deletion.CASCADE, to='service_catalog.jobtemplate')),
                ('services',
                 models.ManyToManyField(blank=True, default=None, to='service_catalog.Service')
                 ),

    ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'list'),
            },
        ),
        migrations.CreateModel(
            name='RequestHook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('extra_vars', models.JSONField(blank=True, default=dict)),
                ('state', models.IntegerField(
                    choices=[(1, 'SUBMITTED'), (2, 'NEED_INFO'), (3, 'REJECTED'), (4, 'CANCELED'), (5, 'ACCEPTED'),
                             (6, 'PROCESSING'), (7, 'COMPLETE'), (8, 'FAILED'), (9, 'ARCHIVED')])),
                ('job_template',
                 models.ForeignKey(on_delete=models.deletion.CASCADE, to='service_catalog.jobtemplate')),
                ('operations',
                 models.ManyToManyField(blank=True, default=None, to='service_catalog.Operation')),
            ],
            options={
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'list'),
            },
        ),
        migrations.AlterField(
            model_name='globalhook',
            name='state',
            field=models.IntegerField(),
        ),
        migrations.RunPython(hook_split_migration),
        migrations.DeleteModel(
            name='GlobalHook',
        ),
    ]
