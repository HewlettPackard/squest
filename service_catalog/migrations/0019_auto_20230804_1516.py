# Generated by Django 3.2.13 on 2023-08-04 13:16

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


deprecated_permission = ["request_operation_on_instance", "request_support_on_instance", "cancel_request",
                         "comment_request"]
deprecated_permission_model = ["billing_group", "teamrolebinding", "userrolebinding"]


def remove_deprecated_permissions(apps, schema_editor):
    Permission = apps.get_model('profiles', 'Permission')
    Permission.objects.filter(codename__in=deprecated_permission).delete()
    Permission.objects.filter(content_type__model__in=deprecated_permission_model).delete()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('service_catalog', '0018_auto_20230803_1529'),
    ]

    operations = [
        migrations.RunSQL("DROP TABLE IF EXISTS guardian_userobjectpermission"),
        migrations.RunSQL("DROP TABLE IF EXISTS guardian_groupobjectpermission"),
        migrations.RunPython(remove_deprecated_permissions),
        migrations.AlterModelOptions(
            name='instance',
            options={'default_permissions': ('add', 'change', 'delete', 'view', 'list'), 'ordering': ['-last_updated'], 'permissions': [('archive_instance', 'Can archive instance'), ('unarchive_instance', 'Can unarchive instance'), ('request_on_instance', 'Can request a day2 operation on instance'), ('admin_request_on_instance', 'Can request an admin day2 operation on instance'), ('view_admin_spec_instance', 'Can view admin spec on instance'), ('change_admin_spec_instance', 'Can change admin spec on instance')]},
        ),
        migrations.AlterModelOptions(
            name='request',
            options={'default_permissions': ('add', 'change', 'delete', 'view', 'list'), 'ordering': ['-last_updated'], 'permissions': [('accept_request', 'Can accept request'), ('cancel_request', 'Can cancel request'), ('reject_request', 'Can reject request'), ('archive_request', 'Can archive request'), ('unarchive_request', 'Can unarchive request'), ('re_submit_request', 'Can re-submit request'), ('process_request', 'Can process request'), ('need_info_request', 'Can ask info request'), ('view_admin_survey', 'Can view admin survey')]},
        ),
        migrations.AlterField(
            model_name='instance',
            name='requester',
            field=models.ForeignKey(help_text='Initial requester', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Requester'),
        ),
        migrations.AlterField(
            model_name='instance',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='service_catalog.service'),
        ),
        migrations.AlterField(
            model_name='request',
            name='accepted_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='accepted_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='request',
            name='processed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='processed_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='request',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
    ]
