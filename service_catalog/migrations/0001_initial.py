# Generated by Django 3.1.7 on 2021-09-29 19:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import martor.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('profiles', '0001_initial'),
        ('django_celery_beat', '0015_edit_solarschedule_events_choices'),
    ]

    operations = [
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Instance name')),
                ('spec', models.JSONField(blank=True, default=dict)),
                ('state', django_fsm.FSMField(default='PENDING', max_length=50)),
                ('billing_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='instances', related_query_name='instance', to='profiles.billinggroup')),
            ],
        ),
        migrations.CreateModel(
            name='JobTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('tower_id', models.IntegerField()),
                ('survey', models.JSONField(default=dict)),
                ('tower_job_template_data', models.JSONField(default=dict)),
                ('is_compliant', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Operation name')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('type', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete')], default='CREATE', max_length=10, verbose_name='Operation type')),
                ('enabled_survey_fields', models.JSONField(default=dict)),
                ('auto_accept', models.BooleanField(default=False)),
                ('auto_process', models.BooleanField(default=False)),
                ('process_timeout_second', models.IntegerField(default=60, verbose_name='Process timeout (s)')),
                ('job_template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_catalog.jobtemplate')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fill_in_survey', models.JSONField(default=dict)),
                ('date_submitted', models.DateTimeField(auto_now=True, null=True)),
                ('date_complete', models.DateTimeField(blank=True, null=True)),
                ('date_archived', models.DateTimeField(blank=True, null=True)),
                ('tower_job_id', models.IntegerField(blank=True, null=True)),
                ('state', django_fsm.FSMField(choices=[('SUBMITTED', 'SUBMITTED'), ('NEED_INFO', 'NEED_INFO'), ('REJECTED', 'REJECTED'), ('ACCEPTED', 'ACCEPTED'), ('CANCELED', 'CANCELED'), ('PROCESSING', 'PROCESSING'), ('COMPLETE', 'COMPLETE'), ('FAILED', 'FAILED'), ('ARCHIVED', 'ARCHIVED')], default='SUBMITTED', max_length=50)),
                ('periodic_task_date_expire', models.DateTimeField(blank=True, null=True)),
                ('failure_message', models.TextField(blank=True, null=True)),
                ('instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='service_catalog.instance')),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_catalog.operation')),
                ('periodic_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='django_celery_beat.periodictask')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Service name')),
                ('description', models.CharField(blank=True, max_length=500)),
                ('image', models.ImageField(blank=True, upload_to='service_image')),
                ('billing_group_id', models.IntegerField(default=None, null=True)),
                ('billing_group_is_shown', models.BooleanField(default=False)),
                ('billing_group_is_selectable', models.BooleanField(default=False)),
                ('billing_groups_are_restricted', models.BooleanField(default=True)),
                ('enabled', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Support',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('state', django_fsm.FSMField(choices=[('OPENED', 'OPENED'), ('CLOSED', 'CLOSED')], default='OPENED', max_length=50)),
                ('date_opened', models.DateTimeField(auto_now=True, null=True)),
                ('date_closed', models.DateTimeField(blank=True, null=True)),
                ('instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supports', related_query_name='support', to='service_catalog.instance')),
                ('user_open', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TowerServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('host', models.CharField(max_length=200, unique=True)),
                ('token', models.CharField(max_length=200)),
                ('secure', models.BooleanField(default=True)),
                ('ssl_verify', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_message', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('support', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supports', related_query_name='support', to='service_catalog.support')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceStateHook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(choices=[('Request', 'Request'), ('Instance', 'Instance')], max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('extra_vars', models.JSONField(default=dict)),
                ('instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='service_catalog.service')),
                ('job_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_catalog.jobtemplate')),
            ],
        ),
        migrations.CreateModel(
            name='RequestMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_message', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='service_catalog.request')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='operation',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', related_query_name='operation', to='service_catalog.service'),
        ),
        migrations.AddField(
            model_name='jobtemplate',
            name='tower_server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_catalog.towerserver'),
        ),
        migrations.AddField(
            model_name='instance',
            name='service',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_catalog.service'),
        ),
        migrations.AddField(
            model_name='instance',
            name='spoc',
            field=models.ForeignKey(help_text='Single Point Of Contact', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='SPOC'),
        ),
        migrations.CreateModel(
            name='GlobalHook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('model', models.CharField(choices=[('Request', 'Request'), ('Instance', 'Instance')], max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('extra_vars', models.JSONField(default=dict)),
                ('job_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_catalog.jobtemplate')),
            ],
        ),
        migrations.CreateModel(
            name='Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('content', martor.models.MartorField()),
                ('services', models.ManyToManyField(blank=True, help_text='Services linked to this doc.', related_name='docs', related_query_name='doc', to='service_catalog.Service')),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.CharField(blank=True, max_length=1000)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_start', models.DateTimeField()),
                ('date_stop', models.DateTimeField()),
                ('type', models.CharField(choices=[('SUCCESS', 'SUCCESS'), ('DANGER', 'DANGER'), ('WARNING', 'WARNING'), ('INFO', 'INFO')], default='INFO', max_length=10)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'ordering': ['-date_created'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='jobtemplate',
            unique_together={('tower_id', 'tower_server')},
        ),
    ]
