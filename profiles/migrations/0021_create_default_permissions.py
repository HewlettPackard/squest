# Generated by Django 3.2.13 on 2023-09-28 16:41
from glob import glob

from django.db import migrations
from django.db.models import signals


def force_create_permissions(apps, schema_editor):
    """Send post migrate signals to create permissions
    """
    from django.apps import apps as django_apps
    app_config_list = ["service_catalog", "profiles", "resource_tracker_v2"]
    for app_name in app_config_list:
        app_config = django_apps.get_app_config(app_name)
        signals.post_migrate.send(
            sender=app_config,
            app_config=app_config,
            verbosity=0,
            interactive=False,
            using=schema_editor.connection.alias,
        )


def add_perm_owner(apps, schema_editor):
    GlobalScope = apps.get_model('profiles', 'GlobalScope')
    Permission = apps.get_model('profiles', 'Permission')
    default_owner_permissions = [
        'service_catalog.view_instance',
        'service_catalog.view_request',
        'service_catalog.view_support',
        'service_catalog.add_support',
        'service_catalog.view_supportmessage',
        'service_catalog.add_supportmessage',
        'service_catalog.view_requestmessage',
        'service_catalog.add_requestmessage',
        'service_catalog.request_on_instance'
    ]

    global_scope, created = GlobalScope.objects.get_or_create(name="GlobalScope")
    codenames = list(
        map(lambda x: x.split('.')[1], default_owner_permissions))
    app_labels = list(
        map(lambda x: x.split('.')[0], default_owner_permissions))
    global_scope.owner_permissions.add(
        *Permission.objects.filter(
            codename__in=codenames,
            content_type__app_label__in=app_labels
        )
    )
    assert (global_scope.owner_permissions.count() == len(default_owner_permissions))


def add_perm_global(apps, schema_editor):
    GlobalScope = apps.get_model('profiles', 'GlobalScope')
    Permission = apps.get_model('profiles', 'Permission')
    default_user_permissions = [
        # Lists
        'service_catalog.list_instance',
        'service_catalog.list_request',
        'service_catalog.list_support',
        'profiles.list_organization',
        'profiles.list_team',
        # Role
        'profiles.view_role',
        # Custom link
        'service_catalog.view_customlink',
        # Doc
        'service_catalog.list_doc',
        'service_catalog.view_doc',
        # Portfolio
        'service_catalog.list_portfolio',
        'service_catalog.view_portfolio',
        # Service
        'service_catalog.list_service',
        'service_catalog.view_service',
        # Operation
        'service_catalog.list_operation',
        'service_catalog.view_operation',
        'service_catalog.request_on_service',
        # Request notification
        'profiles.add_requestnotification',
        'profiles.view_requestnotification',
        'profiles.change_requestnotification',
        'profiles.delete_requestnotification',
        # Instance notification
        'profiles.add_instancenotification',
        'profiles.view_instancenotification',
        'profiles.change_instancenotification',
        'profiles.delete_instancenotification',
    ]

    global_scope, created = GlobalScope.objects.get_or_create(name="GlobalScope")
    codenames = list(
        map(lambda x: x.split('.')[1], default_user_permissions))
    app_labels = list(
        map(lambda x: x.split('.')[0], default_user_permissions))
    global_scope.global_permissions.add(
        *Permission.objects.filter(
            codename__in=codenames,
            content_type__app_label__in=app_labels
        )
    )
    assert (global_scope.global_permissions.count() == len(default_user_permissions))


class Migration(migrations.Migration):
    dependencies = [
        ('profiles', '0020_auto_20230928_1513'),
    ]

    operations = [
        migrations.RunPython(force_create_permissions),
        migrations.RunPython(add_perm_owner),
        migrations.RunPython(add_perm_global),
    ]