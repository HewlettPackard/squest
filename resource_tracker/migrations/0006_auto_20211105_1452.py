# Generated by Django 3.2.7 on 2021-11-05 13:52
from django.db import migrations, models


def execute_calculation(apps, schema_editor):
    """
    execute all calculation in existing resource group and pool
    Model methods are not available in migrations. The workaround consist into mimic the target method here
    """
    ResourceGroupAttributeDefinition = apps.get_model('resource_tracker', 'ResourceGroupAttributeDefinition')
    ResourceAttribute = apps.get_model('resource_tracker', 'ResourceAttribute')
    for resource_group_def in ResourceGroupAttributeDefinition.objects.all():
        total = 0
        for resource in resource_group_def.resource_group.resources.all():
            try:
                total += resource.attributes.get(attribute_type=resource_group_def).value
            except ResourceAttribute.DoesNotExist:
                pass
        resource_group_def.total_resource = total
        resource_group_def.save()

    ResourcePoolAttributeDefinition = apps.get_model('resource_tracker', 'ResourcePoolAttributeDefinition')
    for resource_pool_def in ResourcePoolAttributeDefinition.objects.all():
        total_produced = 0
        for producer in resource_pool_def.producers.all():  # producer == ResourceGroupAttributeDefinition
            # For all ResourceGroup that produce for my attribute
            for resource in producer.resource_group.resources.all():
                # For all resource in the resource group, get the good attribute
                try:
                    total_produced += resource.attributes.get(attribute_type=producer).value
                except ResourceAttribute.DoesNotExist:
                    pass
        resource_pool_def.total_produced = total_produced * resource_pool_def.over_commitment_producers
        resource_pool_def.save()

        total_consumed = 0
        for consumer in resource_pool_def.consumers.all():  # consumer == ResourceGroupAttributeDefinition
            for resource in consumer.resource_group.resources.all():
                try:
                    total_consumed += resource.attributes.get(attribute_type=consumer).value
                except ResourceAttribute.DoesNotExist:
                    pass
        resource_pool_def.total_consumed = total_consumed * resource_pool_def.over_commitment_consumers
        resource_pool_def.save()


class Migration(migrations.Migration):

    dependencies = [
        ('resource_tracker', '0005_auto_20211015_1015'),
    ]


    operations = [
        migrations.AddField(
            model_name='resourcegroupattributedefinition',
            name='total_resource',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='resourcepoolattributedefinition',
            name='total_consumed',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='resourcepoolattributedefinition',
            name='total_produced',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(execute_calculation),
    ]
