# Generated by Django 3.2.13 on 2023-05-12 12:49

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('service_catalog', '0012_auto_20221004_1808'),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, default='', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_deleted_on_instance_deletion', models.BooleanField(default=True, verbose_name='Delete this resource on instance deletion')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Transformer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor', models.FloatField(blank=True, null=True)),
                ('total_consumed', models.IntegerField(default=0)),
                ('total_produced', models.IntegerField(default=0)),
                ('yellow_threshold_percent_consumed', models.IntegerField(blank=True, default=80, help_text='Threshold at which the color changes to yellow. Threshold is reverse when the red threshold is lower than the yellow threshold.', verbose_name='Yellow threshold percent consumed')),
                ('red_threshold_percent_consumed', models.IntegerField(blank=True, default=90, help_text='Threshold at which the color changes to red. Threshold is reverse when the red threshold is lower than the yellow threshold.', verbose_name='Red threshold percent consumed')),
                ('attribute_definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformers', related_query_name='transformer', to='resource_tracker_v2.attributedefinition')),
                ('consume_from_attribute_definition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consume_from_attribute_definition', to='resource_tracker_v2.attributedefinition')),
                ('consume_from_resource_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consume_from_resource_group', to='resource_tracker_v2.resourcegroup')),
                ('resource_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformers', related_query_name='transformer', to='resource_tracker_v2.resourcegroup')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField(default=0)),
                ('attribute_definition', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_attributes', related_query_name='resource_attribute', to='resource_tracker_v2.attributedefinition')),
                ('resource', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_attributes', related_query_name='resource_attribute', to='resource_tracker_v2.resource')),
            ],
        ),
        migrations.AddField(
            model_name='resource',
            name='resource_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', related_query_name='resource', to='resource_tracker_v2.resourcegroup'),
        ),
        migrations.AddField(
            model_name='resource',
            name='service_catalog_instance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resources', related_query_name='resource', to='service_catalog.instance'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddConstraint(
            model_name='transformer',
            constraint=models.CheckConstraint(check=models.Q(('resource_group', django.db.models.expressions.F('consume_from_resource_group')), _negated=True), name='cannot_consume_from_itself'),
        ),
        migrations.AlterUniqueTogether(
            name='transformer',
            unique_together={('resource_group', 'attribute_definition', 'consume_from_resource_group', 'consume_from_attribute_definition')},
        ),
        migrations.AlterUniqueTogether(
            name='resource',
            unique_together={('name', 'resource_group')},
        ),
    ]
