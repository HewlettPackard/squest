{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Squest","text":""},{"location":"#welcome-to-the-squest-documentation","title":"Welcome to the Squest documentation!","text":"<p>Squest is a self-service portal that works on top of Red Hat Ansible Automation Platform/AWX.</p> <ul> <li>Follow the installation guide to get your own deployment up and running</li> <li>Discuss with developers or the community on Gitter Chat</li> <li>Check out our GitHub repository if you are interested into contributing to Squest</li> <li>Don't hesitate to raise an issue to propose new features or raise a bug</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#connect-squest-to-your-controller","title":"Connect Squest to your controller","text":"<p>The first step consist into adding a backend controller (RHAAP/AWX). In the left sidebar of Squest, go into the Administration group, look for the RHAAP/AWX item and follow the steps described in the  administration documentation to add your controller.</p> <p>Once added, all Job templates present on the controller should appear in Squest.</p>"},{"location":"getting_started/#create-your-first-service","title":"Create your first service","text":"<p>Go into the Service catalog --&gt; All Services and click on add a new service.</p> <p>The only mandatory information here is the name. </p> <p>Note</p> <p>For more information about the other flags, refer to service documentation.</p> <p>Once the service created, the next page invite you to create the first operation that will \"create\" an instance of this service.</p> <p>In this form, mandatory field are a name and selecting the job template to execute in the controller.</p> <p>Note</p> <p>For more information about the other flags, refer to operation documentation.</p>"},{"location":"getting_started/#request-your-service","title":"Request your service","text":"<p>Once the operation configured, the service is available in the catalog. Click on the order button of the service to create a new request. </p> <p>The first page ask to give an instance name which is a short name that will help you to identify and manage the lifecycle of the instance later. For example <code>my_test_instance</code>.</p> <p>In the second page, Squest will ask to fill all the variable that are present in the job template survey if one was attached.</p> <p>The request then appears in the Request tab. Click on the ID of the request to review it.</p> <p>The request detail page gives information about the current state of the request. From here you can accept, reject, cancel or update the filled fields.</p> <p>Once the request accepted, it can be processed, which means that the request is sent to the controller to execute the Job template.</p>"},{"location":"getting_started/#what-next","title":"What next","text":"<p>You know the basics of Squest. You can now dig into the service catalog documentation to learn the concept of services and operations.</p> <p>By default, Squest is deployed with a minimum configuration, this one can be customized by following the settings documentation.</p>"},{"location":"release_notes/","title":"Release Notes","text":"<p>Squest releases are numbered as major, minor, and patch releases.  For example, version <code>1.1.0</code> is a minor release, and <code>1.1.5</code> is a patch release. These can be described as follows:</p> <ul> <li>Major - Introduces or removes an entire API or other core functionality</li> <li>Minor - Implements major new features but may include breaking changes for API consumers or other integrations</li> <li>Patch - A maintenance release which fixes bugs and may introduce backward-compatible enhancements</li> </ul>"},{"location":"release_notes/#v200","title":"v2.0.0","text":"<p>This is a major update of Squest:</p> <ul> <li>The resource tracker component has been entirely refactored and cannot be migrated automatically</li> <li>The API has been reworked</li> <li>The previous team feature has been discontinued and replaced by an Organization/Team feature. Please note that teams data from v1 will be lost</li> </ul> <p>To migrate from v1 to v2 if you were using the resource tracking feature:</p> <ul> <li>Make sure that attribute definitions that are common (same type) are exactly the same name</li> <li>Follow the upgrade documentation to bump your current Squest installation to the last v1 version available: <code>v1.10.5</code></li> <li>Execute the resource tracker export script:</li> </ul> <pre><code>docker-compose exec -T django python3 manage.py export_resource_tracker_v1\n</code></pre> <ul> <li>Follow the upgrade documentation to bump your installation to <code>v2.X.X</code></li> <li>Execute the resource tracker import script: </li> </ul> <pre><code>docker-compose exec -T django python3 manage.py import_resource_tracker_v1\n</code></pre>"},{"location":"administration/api/","title":"REST API","text":""},{"location":"administration/api/#authentication","title":"Authentication","text":"<p>Squest API allows tokens and session authentication. The API token management is available in the Tokens section of your profile page.</p> <p>A token is a unique identifier mapped to a Squest user account. Each user may have one or more tokens which can be used for  authentication when making REST API requests. A token can have an expiration date to grant temporary access to an external client.  </p> <p>Usage example with curl <pre><code>export SQUEST_TOKEN=d97ebdbeccf5fc3fba740e8e89048e3d453bd729\ncurl -X GET http://127.0.0.1:8000/api/resource-tracker/resource-group/ \\\n-H \"Authorization: Bearer $SQUEST_TOKEN\"\n</code></pre></p> <p>Usage example in Ansible URI module: <pre><code>- name: Get info from squest\n  hosts: localhost\n  connection: local\n  gather_facts: false\n\n  vars:\n    squest_api: \"http://127.0.0.1:8000/api/\"\n    squest_token: d97ebdbeccf5fc3fba740e8e89048e3d453bd729\n    squest_bearer_token: \"Bearer {{ squest_token }}\"\n\n  tasks:\n    - name: Get all resource group\n      uri:\n        url: \"{{ squest_api }}resource-tracker/resource-group/\"\n        headers:\n          Authorization: \"{{ squest_bearer_token }}\"\n        method: GET\n        status_code: 200\n        body_format: json\n      register: output\n\n    - debug:\n        var: output\n</code></pre></p>"},{"location":"administration/api/#api-documentation","title":"API documentation","text":"<p>The API documentation is available on the URL \"/swagger\" of your Squest instance. </p> <p>E.g: <code>http://192.168.58.128/swagger/</code></p>"},{"location":"administration/backup/","title":"Backup","text":"<p>Persistent data of squest are:</p> <ul> <li>database</li> <li>media folder (used to store images)</li> </ul> <p>An integrated backup solution based on django-dbbackup is  available. Once enabled, backups are placed in the <code>/app/backup</code> folder of one of the django based container.</p> <p>Note</p> <p>Get more info on dbrestore and mediarestore command arguments on the  official doc.</p>"},{"location":"administration/backup/#using-docker-compose","title":"Using Docker compose","text":""},{"location":"administration/backup/#enable-automatic-backup","title":"Enable automatic backup","text":"<p>Enable automatic backup by updating your environment configuration file <code>docker/environment_variables/squest.env</code>: <pre><code>BACKUP_ENABLED=True\n</code></pre></p> <p>By default, backup is performed every day at 1 AM.</p> <p>Note</p> <p>Follow the full configuration documentation to know all available flags for the backup service.</p>"},{"location":"administration/backup/#execute-a-backup-manually","title":"Execute a backup manually","text":"<p>Execute the command below against the celery-beat container: <pre><code>docker-compose exec celery-beat python manage.py dbbackup --clean\ndocker-compose exec celery-beat python manage.py mediabackup --clean\n</code></pre></p> <p>Get the backup list <pre><code>docker-compose exec celery-beat python manage.py listbackups\n</code></pre></p> <p>Output example: <pre><code>Name                                            Datetime            \ndefault-3095326a6ee7-2021-09-10-112953.dump     09/10/21 11:29:53   \n3095326a6ee7-2021-09-10-113338.tar              09/10/21 11:33:38 \n</code></pre></p> <p>Data are placed by default in a mounted volume named <code>squest_backup</code>. You can get the real path on the host by inspecting  the volume: <pre><code>docker volume inspect squest_backup\n</code></pre></p> <p>Output example: <pre><code>[\n    {\n        \"CreatedAt\": \"2021-09-13T09:42:26+02:00\",\n        \"Driver\": \"local\",\n        \"Labels\": {\n            \"com.docker.compose.project\": \"squest\",\n            \"com.docker.compose.version\": \"1.28.4\",\n            \"com.docker.compose.volume\": \"backup\"\n        },\n        \"Mountpoint\": \"/var/lib/docker/volumes/squest_backup/_data\",\n        \"Name\": \"squest_backup\",\n        \"Options\": null,\n        \"Scope\": \"local\"\n    }\n]\n</code></pre></p> <p>In this example, data are placed in the mount point <code>/var/lib/docker/volumes/squest_backup/_data</code> on the host.  Files in this path need to be placed in a safe place.</p>"},{"location":"administration/backup/#restore","title":"Restore","text":"<p>Start Squest services like for the initial deployment <pre><code>docker-compose up\n</code></pre></p> <p>Copy you backup files into the <code>squest_backup</code> mount point of your host <pre><code>sudo cp &lt;backup_folder_path&gt;/* &lt;squest_backup_mount_point&gt;\n</code></pre></p> <p>E.g: <pre><code>sudo cp ~/Desktop/squest_backup/* /var/lib/docker/volumes/squest_backup/_data/\n</code></pre></p> <p>Check that the tool can list your backup files <pre><code>docker-compose exec celery-beat python manage.py listbackups\n</code></pre></p> <p>Restore the database and media folder <pre><code>docker-compose exec celery-beat python manage.py dbrestore\ndocker-compose exec celery-beat python manage.py mediarestore \n</code></pre></p>"},{"location":"administration/backup/#using-kubernetes","title":"Using Kubernetes","text":""},{"location":"administration/backup/#enable-automatic-backup_1","title":"Enable automatic backup","text":"<p>Enable the backup in <code>squest.yml</code> inventory: <pre><code>squest_django:\n  backup: \n    enabled: true\n    crontab: \"0 1 * * *\"\n</code></pre></p> <p>Run the deployment playbook <pre><code>ansible-playbook -v -i inventory deploy.yml --tags backup\n</code></pre></p>"},{"location":"administration/backup/#externalize-backup-via-ssh","title":"Externalize backup via SSH","text":"<p>This feature is optional. By default, the backup cronjob will place backup file into a PVC. Depending on your K8S environment, you might want to externalize them. If you want to push those files into an external ssh server you can use the integrated rsync solution.</p> <pre><code>squest_django:\n  externalize_backup_via_rsync:  # rsync backup files into and external server\n    enabled: true\n    crontab: \"30 1 * * *\"\n    private_ssh_key: \"{{ lookup('file', '/path/to/id_ed25519_squest_k8s_dev') + '\\n' }}\"\n    ssh_user: \"squest_k8s_dev\"\n    ssh_server: \"remote.server.ssh.net\"\n    remote_path: \"/backup/squest_k8s_dev/\"\n</code></pre>"},{"location":"administration/backup/#execute-a-backup-manually_1","title":"Execute a backup manually","text":"<p>Run the <code>backup.yml</code> playbook <pre><code>ansible-playbook -v -i inventory backup.yml\n</code></pre></p> <p>This command will execute a job in K8S that add a backup of the database and media files into a PVC.</p>"},{"location":"administration/backup/#restore_1","title":"Restore","text":"<p>To restore Squest. First, deploy the app like for the first deployment using the playbook.</p> <p>Once Squest is available, copy backup files into django pod <pre><code>kubectl -n squest cp ~/path/to/db-2023-12-06-182115.dump django-54b69fbb48-wrt9j:/app/backup\nkubectl -n squest cp ~/path/to/media-2023-12-06-182117.tar django-54b69fbb48-wrt9j:/app/backup\n</code></pre></p> <p>Check backup is listed <pre><code>kubectl -n squest exec -it django-54b69fbb48-wrt9j python manage.py listbackups\n</code></pre></p> <p>Restore by passing backup file name <pre><code>kubectl -n squest exec -it django-54b69fbb48-wrt9j -- python manage.py dbrestore --database default -i db-2023-12-06-182115.dump\nkubectl -n squest exec -it django-54b69fbb48-wrt9j -- python manage.py mediarestore -i media-2023-12-06-182117.tar\n</code></pre></p>"},{"location":"administration/metrics/","title":"Prometheus metrics","text":"<p>Squest supports optionally exposing native Prometheus metrics from the application.  Prometheus is a popular time series metric platform used for monitoring.</p> <p>Squest exposes metrics at the <code>/metrics</code> HTTP endpoint, e.g. https://squest.domain.local/metrics. </p>"},{"location":"administration/metrics/#squest-config","title":"Squest config","text":"<p>Metrics page is disabled by default. Update your <code>docker/environment_variables/squest.env</code> to enable metrics.</p> <pre><code>METRICS_ENABLED=True\nMETRICS_PASSWORD_PROTECTED=True\nMETRICS_AUTHORIZATION_USERNAME=admin\nMETRICS_AUTHORIZATION_PASSWORD=my_secret_password\n</code></pre>"},{"location":"administration/metrics/#prometheus-config","title":"Prometheus config","text":"<p>Here is an example of prometheus configuration you can use to scrape squest metrics <pre><code>scrape_configs:\n  - job_name: 'squest'\n    scrape_interval: 30s\n    metrics_path: '/metrics/'\n    static_configs:\n      - targets: ['squest.domain.local']\n    scheme: http\n    basic_auth:\n      username: admin\n      password: my_secret_password\n</code></pre></p>"},{"location":"administration/metrics/#exported-metrics","title":"Exported metrics","text":""},{"location":"administration/metrics/#squest_instance_per_service_total","title":"squest_instance_per_service_total","text":"<p>Expose the total number of instance per service.</p> <p>Labels: <code>['service']</code></p> <p>E.g: <pre><code>squest_instance_per_service_total{service=\"Kubernetes\"} 5.0\nsquest_instance_per_service_total{service=\"Openshift\"} 11.0\nsquest_instance_per_service_total{service=\"VMWare\"} 14.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_instance_per_state_total","title":"squest_instance_per_state_total","text":"<p>Expose the total number of instance per state.</p> <p>Labels: <code>['state']</code></p> <p>E.g: <pre><code>squest_instance_per_state_total{state=\"AVAILABLE\"} 2.0\nsquest_instance_per_state_total{state=\"PENDING\"} 28.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_request_per_state_total","title":"squest_request_per_state_total","text":"<p>Expose the total number of request per state.</p> <p>Labels: <code>['state']</code></p> <p>E.g: <pre><code>squest_request_per_state_total{state=\"ACCEPTED\"} 4.0\nsquest_request_per_state_total{state=\"CANCELED\"} 3.0\nsquest_request_per_state_total{state=\"COMPLETE\"} 5.0\nsquest_request_per_state_total{state=\"FAILED\"} 4.0\nsquest_request_per_state_total{state=\"ON_HOLD\"} 2.0\nsquest_request_per_state_total{state=\"PROCESSING\"} 3.0\nsquest_request_per_state_total{state=\"REJECTED\"} 5.0\nsquest_request_per_state_total{state=\"SUBMITTED\"} 4.00\n</code></pre></p>"},{"location":"administration/metrics/#squest_instance_total","title":"squest_instance_total","text":"<p>Total number of instance in squest</p> <p>Labels: <code>['service', 'state', 'billing_group']</code></p> <p>E.g: <pre><code>squest_instance_total{billing_group=\"Orchestration\",service=\"VMWare\",state=\"AVAILABLE\"} 1.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"VMWare\",state=\"AVAILABLE\"} 1.0\nsquest_instance_total{billing_group=\"Orchestration\",service=\"VMWare\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"5G\",service=\"VMWare\",state=\"PENDING\"} 6.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"VMWare\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"Openshift\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"5G\",service=\"Openshift\",state=\"PENDING\"} 3.0\nsquest_instance_total{billing_group=\"Orchestration\",service=\"Openshift\",state=\"PENDING\"} 4.0\nsquest_instance_total{billing_group=\"Orchestration\",service=\"Kubernetes\",state=\"PENDING\"} 1.0\nsquest_instance_total{billing_group=\"5G\",service=\"Kubernetes\",state=\"PENDING\"} 2.0\nsquest_instance_total{billing_group=\"Assurance\",service=\"Kubernetes\",state=\"PENDING\"} 2.0\nsquest_instance_total{billing_group=\"None\",service=\"Openshift\",state=\"PENDING\"} 1.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_request_total","title":"squest_request_total","text":"<p>Total number of request in squest</p> <p>Labels: <code>['service', 'state']</code></p> <p>E.g: <pre><code>squest_request_total{service=\"VMWare\",state=\"COMPLETE\"} 3.0\nsquest_request_total{service=\"VMWare\",state=\"PROCESSING\"} 2.0\nsquest_request_total{service=\"VMWare\",state=\"ACCEPTED\"} 2.0\nsquest_request_total{service=\"VMWare\",state=\"ON_HOLD\"} 1.0\nsquest_request_total{service=\"VMWare\",state=\"REJECTED\"} 4.0\nsquest_request_total{service=\"VMWare\",state=\"SUBMITTED\"} 1.0\nsquest_request_total{service=\"VMWare\",state=\"FAILED\"} 1.0\nsquest_request_total{service=\"Openshift\",state=\"REJECTED\"} 1.0\nsquest_request_total{service=\"Openshift\",state=\"CANCELED\"} 2.0\nsquest_request_total{service=\"Openshift\",state=\"FAILED\"} 3.0\nsquest_request_total{service=\"Openshift\",state=\"COMPLETE\"} 1.0\nsquest_request_total{service=\"Openshift\",state=\"SUBMITTED\"} 2.0\nsquest_request_total{service=\"Openshift\",state=\"ACCEPTED\"} 2.0\nsquest_request_total{service=\"Kubernetes\",state=\"SUBMITTED\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"COMPLETE\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"CANCELED\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"PROCESSING\"} 1.0\nsquest_request_total{service=\"Kubernetes\",state=\"ON_HOLD\"} 1.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_support_total","title":"squest_support_total","text":"<p>Total number of support</p> <p>Labels: <code>['state']</code></p> <p>E.g: <pre><code>squest_support_total{service=\"VMWare\",state=\"CLOSED\"} 2.0\nsquest_support_total{service=\"VMWare\",state=\"OPENED\"} 1.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_user_total","title":"squest_user_total","text":"<p>Total number of user</p> <p>Labels: <code>['is_superuser']</code></p> <p>E.g: <pre><code>squest_user_total{is_superuser=\"true\"} 1.0\nsquest_user_total{is_superuser=\"false\"} 6.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_team_total","title":"squest_team_total","text":"<p>Total number of team</p> <p>E.g: <pre><code>squest_team_total 3.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_billing_group_total","title":"squest_billing_group_total","text":"<p>Total number of team</p> <p>E.g: <pre><code>squest_billing_group_total 3.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_quota_consumed","title":"squest_quota_consumed","text":"<p>Consumption of quota per billing group and attribute</p> <p>E.g: <pre><code>squest_quota_consumed{billing_group=\"5G\",quota_attribute=\"CPU\"} 22.0\nsquest_quota_consumed{billing_group=\"5G\",quota_attribute=\"Memory\"} 45.0\nsquest_quota_consumed{billing_group=\"Assurance\",quota_attribute=\"CPU\"} 20.0\nsquest_quota_consumed{billing_group=\"Assurance\",quota_attribute=\"Memory\"} 23.0\n</code></pre></p>"},{"location":"administration/metrics/#squest_quota_limit","title":"squest_quota_limit","text":"<p>Limit of quota per billing group and attribute</p> <pre><code>squest_quota_limit{billing_group=\"5G\",quota_attribute=\"CPU\"} 100.0\nsquest_quota_limit{billing_group=\"5G\",quota_attribute=\"Memory\"} 50.0\nsquest_quota_limit{billing_group=\"Assurance\",quota_attribute=\"CPU\"} 45.0\nsquest_quota_limit{billing_group=\"Assurance\",quota_attribute=\"Memory\"} 12.0)\n</code></pre> <p>A percentage of consumption can be calculated by using <code>squest_quota_consumed</code> and <code>squest_quota_limit</code>. PromQL example: <pre><code>round((squest_quota_consumed / squest_quota_limit) * 100)\n</code></pre></p>"},{"location":"administration/upgrade/","title":"Squest upgrade","text":"<p>This documentation aims at explaining how to perform an upgrade of squest on new release.</p> <p>Note</p> <p>Read the changelog and release note of the version before performing any update to know what are the breaking changes or specific requirements of the new release.</p> <p>Note</p> <p>We recommend performing a manual backup before any upgrade. See the dedicated backup doc</p>"},{"location":"administration/upgrade/#using-docker-compose","title":"Using Docker compose","text":"<p>Stop all containers that use the Squest image <pre><code>docker-compose kill django celery-worker celery-beat\n</code></pre></p> <p>Starting from here, the maintenance page should appear automatically in place of the Squest app.</p> <p>Pull the new image <pre><code>docker pull quay.io/hewlettpackardenterprise/squest:&lt;version&gt;\n</code></pre></p> <p>E.g <pre><code>docker pull quay.io/hewlettpackardenterprise/squest:latest\n</code></pre></p> <p>Start back containers <pre><code>docker-compose start django celery-worker celery-beat\n</code></pre></p>"},{"location":"administration/upgrade/#using-kubernetes","title":"Using Kubernetes","text":"<p>Change the Squest image version in the inventory <pre><code>squest_django:\n  image: quay.io/hewlettpackardenterprise/squest:&lt;version&gt;\n</code></pre></p> <p>Run the update playbook <pre><code>ansible-playbook -v -i inventory update.yml\n</code></pre></p> <p>The playbook will:</p> <ul> <li>Redirect the traffic to maintenance page</li> <li>Rollout Django containers with the new image</li> <li>Execute database migration</li> <li>Restore traffic to Squest once the app is back available</li> </ul>"},{"location":"configuration/squest_settings/","title":"Configuration  settings","text":"<p>Default settings are configured to provide a testing/development environment. For a production setup it is recommended to adjust them following your target environment.</p> <p>When using docker-compose, the configuration is loaded from environment variables file placed in the folder <code>docker/environment_variables</code>.</p> <p>When using Kubernetes, the configuration need to be placed in the <code>squest.yml</code> inventory file in the variable <code>squest_django/env</code>.</p>"},{"location":"configuration/squest_settings/#database","title":"Database","text":""},{"location":"configuration/squest_settings/#db_root_password","title":"DB_ROOT_PASSWORD","text":"<p>Set the database root/superuser password</p>"},{"location":"configuration/squest_settings/#database_1","title":"DATABASE","text":"<p>Default: <code>default</code></p> <p>Setup mysql database usage Set to <code>psql</code> for postgres SQL usage</p>"},{"location":"configuration/squest_settings/#db_database","title":"DB_DATABASE","text":"<p>Default: <code>squest_db</code></p> <p>Database name.</p>"},{"location":"configuration/squest_settings/#db_user","title":"DB_USER","text":"<p>Default: <code>squest_user</code></p> <p>User used to connect to the <code>DB_DATABASE</code> name.</p>"},{"location":"configuration/squest_settings/#db_password","title":"DB_PASSWORD","text":"<p>Default: <code>squest_password</code></p> <p>Password of the <code>DB_USER</code> username.  </p>"},{"location":"configuration/squest_settings/#db_host","title":"DB_HOST","text":"<p>Default: <code>127.0.0.1</code></p> <p>Database host. The default value is localhost to match the development configuration.  Switch to <code>db</code> in production when using the docker-compose based deployment.</p>"},{"location":"configuration/squest_settings/#db_port","title":"DB_PORT","text":"<p>Default: <code>3306</code></p> <p>Database port.</p>"},{"location":"configuration/squest_settings/#authentication","title":"Authentication","text":""},{"location":"configuration/squest_settings/#ldap","title":"LDAP","text":""},{"location":"configuration/squest_settings/#ldap_enabled","title":"LDAP_ENABLED","text":"<p>Default: <code>False</code></p> <p>Set to <code>True</code> to enable LDAP based authentication.  </p>"},{"location":"configuration/squest_settings/#auth_ldap_server_uri","title":"AUTH_LDAP_SERVER_URI","text":"<p>Default: <code>ldap:port</code></p> <p>Set the LDAP serveur URI and port</p>"},{"location":"configuration/squest_settings/#auth_ldap_bind_dn","title":"AUTH_LDAP_BIND_DN","text":"<p>Default: <code>cn=service_account_name,ou=Applications,o=domain.com</code></p> <p>Set the LDAP DN to authenticate to the LDAP serveur</p>"},{"location":"configuration/squest_settings/#auth_ldap_bind_password","title":"AUTH_LDAP_BIND_PASSWORD","text":"<p>Default: <code>NONE</code></p> <p>Associated to AUTH_LDAP_BIND_DN, password used to authenticate DN</p>"},{"location":"configuration/squest_settings/#auth_ldap_user_search","title":"AUTH_LDAP_USER_SEARCH","text":"<p>Default: <code>ou=People,o=domain.com</code></p> <p>User search patern</p>"},{"location":"configuration/squest_settings/#auth_ldap_attr_firstname","title":"AUTH_LDAP_ATTR_FIRSTNAME","text":"<p>Default: <code>givenName</code></p> <p>set the LDAP \"first_name\" attribute</p>"},{"location":"configuration/squest_settings/#auth_ldap_attr_lastname","title":"AUTH_LDAP_ATTR_LASTNAME","text":"<p>Default: <code>sn</code></p> <p>set the LDAP \"last_name\" attribute</p>"},{"location":"configuration/squest_settings/#auth_ldap_attr_mail","title":"AUTH_LDAP_ATTR_MAIL","text":"<p>Default: <code>mail</code></p> <p>set the LDAP \"email\" attribute</p>"},{"location":"configuration/squest_settings/#openid-connect","title":"OpenID Connect","text":""},{"location":"configuration/squest_settings/#social_auth_oidc_enabled","title":"SOCIAL_AUTH_OIDC_ENABLED","text":"<p>Default: <code>False</code></p> <p>set to <code>True</code> to enable OpenID Connect based authentication</p>"},{"location":"configuration/squest_settings/#social_auth_oidc_btn_text","title":"SOCIAL_AUTH_OIDC_BTN_TEXT","text":"<p>Default: <code>OpenID Login</code></p> <p>set the OpenID Connect login button text</p>"},{"location":"configuration/squest_settings/#social_auth_oidc_oidc_endpoint","title":"SOCIAL_AUTH_OIDC_OIDC_ENDPOINT","text":"<p>Default: <code>None</code></p> <p>set the endpoint to the base url and the remaining configuration will be auto-completed like so: <code>&lt;SOCIAL_AUTH_OIDC_OIDC_ENDPOINT&gt;/.well-known/openid-configuration</code></p>"},{"location":"configuration/squest_settings/#social_auth_oidc_key","title":"SOCIAL_AUTH_OIDC_KEY","text":"<p>Default: <code>None</code></p> <p>set to the OpenID client ID that Squest should be configured to use</p>"},{"location":"configuration/squest_settings/#social_auth_oidc_secret","title":"SOCIAL_AUTH_OIDC_SECRET","text":"<p>Default: <code>None</code></p> <p>set to the OpenID client secret that Squest should be configured to use</p>"},{"location":"configuration/squest_settings/#password","title":"Password","text":""},{"location":"configuration/squest_settings/#password_enabled","title":"PASSWORD_ENABLED","text":"<p>Default: <code>True</code></p> <p>set to <code>False</code> to disable the password form on the login view</p>"},{"location":"configuration/squest_settings/#default_admin_token","title":"DEFAULT_ADMIN_TOKEN","text":"<p>Default: <code>None</code></p> <p>Set an API token that will be linked to the admin user when starting Squest.</p>"},{"location":"configuration/squest_settings/#login_helper_text","title":"LOGIN_HELPER_TEXT","text":"<p>Default: <code>None</code></p> <p>Add a custom note into the login page that helps user to know what are the expected credentials. HTML text is supported.</p> <p>E.G: \"Use your corporate email and password\".</p>"},{"location":"configuration/squest_settings/#squest","title":"Squest","text":""},{"location":"configuration/squest_settings/#maintenance_mode_enabled","title":"MAINTENANCE_MODE_ENABLED","text":"<p>Default: False</p> <p>When enabled, only administrators can access squest UI and API.  This can be used for example to block new requests by end users from the service catalog. So an administrator can perform operations against the API like migrating instance specs.</p> <p>Note</p> <p>This can also be set on the fly from the admin panel (top right corner of the UI) in the object <code>Squest settings</code>.</p>"},{"location":"configuration/squest_settings/#squest_host","title":"SQUEST_HOST","text":"<p>Default: <code>http://squest.domain.local</code></p> <p>Address of the Squest portal instance. Used in email templates and in metadata sent to Red Hat Ansible Automation Platform/AWX job templates.</p>"},{"location":"configuration/squest_settings/#squest_email_host","title":"SQUEST_EMAIL_HOST","text":"<p>Default: <code>squest@squest.domain.local</code></p> <p>Domain name used as email sender. E.g: \"squest@squest.domain.local\". </p>"},{"location":"configuration/squest_settings/#squest_email_notification_enabled","title":"SQUEST_EMAIL_NOTIFICATION_ENABLED","text":"<p>Default: Based on <code>DEBUG</code> value by default</p> <p>Set to <code>True</code> to enable email notifications.  </p>"},{"location":"configuration/squest_settings/#is_dev_server","title":"IS_DEV_SERVER","text":"<p>Default: False</p> <p>Set to <code>True</code> to change the navbar and footer color to visually identify a testing instance of Squest.</p>"},{"location":"configuration/squest_settings/#smtp","title":"SMTP","text":""},{"location":"configuration/squest_settings/#email_host","title":"EMAIL_HOST","text":"<p>Default: <code>localhost</code></p> <p>The SMTP host to use for sending email.</p>"},{"location":"configuration/squest_settings/#email_port","title":"EMAIL_PORT","text":"<p>Default: <code>25</code></p> <p>Port to use for the SMTP server defined in <code>EMAIL_HOST</code>.  </p>"},{"location":"configuration/squest_settings/#backup","title":"Backup","text":""},{"location":"configuration/squest_settings/#backup_enabled","title":"BACKUP_ENABLED","text":"<p>Default: <code>False</code></p> <p>Switch to <code>True</code> to enable backup. Refer to the dedicated documentation.</p>"},{"location":"configuration/squest_settings/#backup_crontab","title":"BACKUP_CRONTAB","text":"<p>Default: <code>0 1 * * *</code></p> <p>Crontab line for backup. By default, the backup is performed every day at 1AM.</p>"},{"location":"configuration/squest_settings/#dbbackup_cleanup_keep","title":"DBBACKUP_CLEANUP_KEEP","text":"<p>Default: <code>5</code></p> <p>Number of db backup file to keep. Doc.</p>"},{"location":"configuration/squest_settings/#dbbackup_cleanup_keep_media","title":"DBBACKUP_CLEANUP_KEEP_MEDIA","text":"<p>Default: <code>5</code></p> <p>Number of media backup tar to keep. Doc.</p>"},{"location":"configuration/squest_settings/#metrics","title":"Metrics","text":""},{"location":"configuration/squest_settings/#metrics_enabled","title":"METRICS_ENABLED","text":"<p>Default: <code>False</code></p> <p>Switch to <code>True</code> to enable Prometheus metrics page.</p>"},{"location":"configuration/squest_settings/#metrics_password_protected","title":"METRICS_PASSWORD_PROTECTED","text":"<p>Default: <code>True</code></p> <p>Switch to <code>False</code> to disable the basic authentication on metrics page.</p>"},{"location":"configuration/squest_settings/#metrics_authorization_username","title":"METRICS_AUTHORIZATION_USERNAME","text":"<p>Default: <code>admin</code></p> <p>Username for the basic authentication of the metrics page.</p>"},{"location":"configuration/squest_settings/#metrics_authorization_password","title":"METRICS_AUTHORIZATION_PASSWORD","text":"<p>Default: <code>admin</code></p> <p>Password for the basic authentication of the metrics page.</p>"},{"location":"configuration/squest_settings/#auto-cleanup","title":"Auto cleanup","text":""},{"location":"configuration/squest_settings/#doc_images_cleanup_enabled","title":"DOC_IMAGES_CLEANUP_ENABLED","text":"<p>Default: <code>False</code></p> <p>Switch to <code>True</code> to enable automatic cleanup of ghost docs images from media folder.</p>"},{"location":"configuration/squest_settings/#doc_images_cleanup_crontab","title":"DOC_IMAGES_CLEANUP_CRONTAB","text":"<p>Default: <code>30 1 * * *</code></p> <p>Crontab line for ghost image cleanup. By default performed every day at 1:30 AM.</p>"},{"location":"configuration/squest_settings/#production","title":"Production","text":""},{"location":"configuration/squest_settings/#secret_key","title":"SECRET_KEY","text":"<p>Default:  Default randomly-generated</p> <p>Django secret key used for cryptographic signing. Doc.</p>"},{"location":"configuration/squest_settings/#debug","title":"DEBUG","text":"<p>Default: True</p> <p>Django DEBUG mode. Switch to <code>False</code> for production.</p>"},{"location":"configuration/squest_settings/#allowed_hosts","title":"ALLOWED_HOSTS","text":"<p>Default: <code>*</code></p> <p>Comma separated list of allowed FQDN. Refer to the complete documentation.   </p>"},{"location":"configuration/squest_settings/#csrf_trusted_origins","title":"CSRF_TRUSTED_ORIGINS","text":"<p>Default: <code>http://127.0.0.1:8080,http://localhost:8080</code></p> <p>Comma separated list of trusted origin.  Refer to the complete documentation.</p> <p>Note</p> <p>If you deploy with <code>http://1.2.3.4:8080</code>, please add <code>CSRF_TRUSTED_ORIGINS=http://127.0.0.1:8080,http://localhost:8080,http://1.2.3.4:8080</code> in your variables.</p>"},{"location":"configuration/squest_settings/#celery_broker_url","title":"CELERY_BROKER_URL","text":"<p>Default: <code>amqp://rabbitmq:rabbitmq@localhost:5672/squest</code></p> <p>RabbitMQ message broker URL. The default value is localhost to match the development configuration.  Replace <code>localhost</code> by <code>rabbitmq</code> in production when using the docker-compose based deployment.</p>"},{"location":"configuration/squest_settings/#language_code","title":"LANGUAGE_CODE","text":"<p>Default: <code>en-us</code></p> <p>Django language. Doc</p>"},{"location":"configuration/squest_settings/#time_zone","title":"TIME_ZONE","text":"<p>Default: <code>Europe/Paris</code></p> <p>Time zone of the server that host Squest service. Doc</p>"},{"location":"configuration/squest_settings/#date_format","title":"DATE_FORMAT","text":"<p>Default: <code>%d %b, %Y  %H:%M</code></p> <p>Change the format of all date in Squest UI. Based on Python strftime.</p>"},{"location":"configuration/squest_settings/#plugins","title":"Plugins","text":""},{"location":"configuration/squest_settings/#field_validator_path","title":"FIELD_VALIDATOR_PATH","text":"<p>Warning</p> <p>FIELD_VALIDATOR_PATH is now deprecated. Please use SURVEY_VALIDATOR_PATH instead.</p> <p>Default: <code>plugins/field_validators</code></p> <p>Path to form field validation modules.</p>"},{"location":"configuration/squest_settings/#survey_validator_path","title":"SURVEY_VALIDATOR_PATH","text":"<p>Default: <code>plugins/survey_validators</code></p> <p>Path to SurveyValidator modules.</p>"},{"location":"configuration/squest_settings/#redis","title":"Redis","text":""},{"location":"configuration/squest_settings/#redis_cache_user","title":"REDIS_CACHE_USER","text":"<p>Default: <code>default</code></p> <p>Username of Redis account.</p>"},{"location":"configuration/squest_settings/#redis_cache_password","title":"REDIS_CACHE_PASSWORD","text":"<p>Default: <code>redis_secret_password</code></p> <p>Password of Redis account.</p>"},{"location":"configuration/squest_settings/#redis_cache_host","title":"REDIS_CACHE_HOST","text":"<p>Default: <code>127.0.0.1</code></p> <p>Redis hostname.</p>"},{"location":"configuration/squest_settings/#redis_cache_port","title":"REDIS_CACHE_PORT","text":"<p>Default: <code>6379</code></p> <p>Redis port.</p>"},{"location":"contribute/code/","title":"Contributing: code","text":"<p>The community can contribute to Squest by providing some new features, bug fix and enhancements.</p> <p>How to contribute</p> <ol> <li>Fork it!</li> <li>Checkout the dev branch <code>git checkout dev</code></li> <li>Create your feature branch: <code>git checkout -b my-new-feature</code></li> <li>Commit your changes: <code>git commit -am 'Add some feature'</code></li> <li>Push to the branch: <code>git push origin my-new-feature</code></li> <li>Submit a pull request in the dev branch</li> </ol> <p>If you are new on Github environment, we recommend you to read the first contribution guide.</p> <p>Follow the development environment setup documentation to prepare your workstation with prerequisites.</p>"},{"location":"contribute/code/#constraints","title":"Constraints","text":"<p>Respect PEP 257 -- Docstring conventions.  For each class or method add a description with summary, input parameter, returned parameter,  type of parameter</p> <pre><code>def my_method(my_parameter):\n    \"\"\"\n    Description of he method\n    :param my_parameter: description of he parameter\n    :type my_parameter: str\n    \"\"\"\n    pass\n</code></pre> <p>Respect PEP 8 -- Style Guide for Python Code We recommend the usage of an IDE like Pycharm</p>"},{"location":"contribute/documentation/","title":"Contributing to the documentation","text":"<p>The documentation is written in markdown and then generated with mkdocs. Required libraries are installed if you've followed the development environment documentation of the project.</p> <p>Graphs and diagrams are generated by the Mermaid library.</p> <p>Update the documentation in the <code>docs</code> folder placed in the root of the project.</p> <p>Run dev server locally to check the result <pre><code>mkdocs serve -a 0.0.0.0:4000\n</code></pre></p> <p>The page is available on http://127.0.0.1:4000.</p> <p>Send a pull request then to propose your changes to the project.</p>"},{"location":"contribute/documentation/#notes","title":"Notes","text":""},{"location":"contribute/documentation/#reset-your-gh-pages-branch-to-match-the-upstream","title":"Reset your gh-pages branch to match the upstream","text":"<p>If you've built mkdocs and published a version in your fork for testing, your <code>gh-pages</code> branch will differ from the  upstream repository. </p> <p>To reset your local <code>gh-pages</code>, follow the procedure below: <pre><code># delete local branch\ngit branch -D gh-pages\n# delete remote branch (fork here is your remote. Replace by origin if needed)\ngit push -d fork gh-pages\n# checkout gh-pages\ngit checkout --orphan gh-pages\n# pull last version (upstream is the remote name of the main repo)\ngit pull upstream gh-pages\n# (optional) force push to your fork to override changes\ngit push -f fork gh-pages\n# go back to your original branch\ngit checkout master\n</code></pre></p>"},{"location":"dev/dev-env/","title":"Setup a development environment","text":""},{"location":"dev/dev-env/#pre-requisites","title":"Pre requisites","text":""},{"location":"dev/dev-env/#tools","title":"Tools","text":"<p>Following tools need to be installed on your workstation:</p> <ul> <li>Docker</li> <li>Docker-compose</li> <li>Python 3.12</li> <li>Python virtualenv</li> <li>Poetry</li> <li>npm</li> </ul>"},{"location":"dev/dev-env/#system-packages","title":"System packages","text":"<p>Ubuntu based OS: <pre><code>sudo apt-get install libmysqlclient-dev graphviz default-mysql-client libsqlite3-dev libsasl2-dev python3-dev libldap2-dev libssl-dev libpq-dev\n</code></pre></p> <p>CentOS/RedHat/Fedora <pre><code>sudo yum install mysql-devel graphviz mysql libsq3-devel libpq-devel\n</code></pre></p>"},{"location":"dev/dev-env/#start-a-development-environment","title":"Start a development environment","text":"<p>The development environment is composed of 4 parts:</p> <ul> <li>Docker compose: The Docker compose file is used to deploy all required components such as the database and the message broker</li> <li>Celery worker: The Celery worker is a separated process that receive tasks from the main Django process to be executed asynchronously</li> <li>Celery beat: Celery beat is a periodic task scheduler that send task into the celery worker based on a frequency. This part is used by Squest to check the status of executed RHAAP/AWX job</li> <li>Django built in web server: Integrated web server used only for development purpose. main process of the application that serve the Web Ui and the API</li> </ul>"},{"location":"dev/dev-env/#docker-compose","title":"Docker compose","text":"<p>Run the Docker compose file with only required services to bring up database, message broker and other required system <pre><code>docker-compose -f docker-compose.yml  -f dev.docker-compose.yml up db phpmyadmin rabbitmq redis-cache\n</code></pre> If you use postgreSQL, update docker/environment_variables/squest.env, then run <pre><code>docker-compose -f docker-compose.yml  -f psql.docker-composer.yml -f dev.docker-compose.yml up db phpmyadmin rabbitmq redis-cache\n</code></pre></p>"},{"location":"dev/dev-env/#javascript-libraries","title":"Javascript libraries","text":"<p>Install JS libs (npm need to be installed) <pre><code>npm install\n</code></pre></p>"},{"location":"dev/dev-env/#python-environment","title":"Python environment","text":"<p>Install python via pyenv then create a virtual environment for Squest <pre><code>cd /path/to/squest\n# install python\npyenv install 3.12.3\n# create a venv\npyenv virtualenv 3.12.3 squest\n# assign the venv to the current folder\npyenv local squest\n# activate the env\npyenv activate squest\n# Install poetry in the venv\npip3 install poetry\n</code></pre></p> <p>Initializing and installing python libraries with Poetry <pre><code>poetry install\n</code></pre></p> <p>Go into the python virtual env <pre><code>poetry shell\n</code></pre></p> <p>Create the database with Django migration script <pre><code>python manage.py migrate\n</code></pre></p> <p>Collect static files <pre><code>python manage.py collectstatic --noinput\n</code></pre></p> <p>Insert default data <pre><code>python manage.py insert_default_data\n</code></pre></p>"},{"location":"dev/dev-env/#celery-worker-and-periodic-task-scheduler","title":"Celery worker and periodic task scheduler","text":"<p>Run Celery process for async tasks from a new terminal <pre><code>poetry shell\ncelery -A service_catalog worker -l info\n</code></pre></p> <p>Run Celery beat for periodic tasks from a new terminal <pre><code>poetry shell\ncelery -A service_catalog worker --beat -l info\n</code></pre></p>"},{"location":"dev/dev-env/#django-integrated-web-server","title":"Django integrated web server","text":"<p>This next command should be executed from your IDE.</p> <p>Run django dev server <pre><code>poetry shell\npython manage.py runserver\n</code></pre></p> <p>Settings are placed into the <code>squest/settings.py</code> file which is a standard Django core settings file.</p>"},{"location":"dev/dev-env/#commands","title":"Commands","text":"<p>To clean all Celery pending tasks <pre><code>poetry shell\ncelery -A restapi purge\n</code></pre></p>"},{"location":"dev/dev-env/#execute-tests","title":"Execute tests","text":"<p>Run unit tests <pre><code>poetry shell\npython manage.py test\n</code></pre></p> <p>Run code coverage <pre><code>coverage run --source='.' manage.py test\n# generate terminal report\ncoverage report\n# generate HTML report\ncoverage html\n</code></pre></p>"},{"location":"dev/dev-env/#phpmyadmin","title":"phpMyAdmin","text":"<p>phpMyAdmin is exposed on localhost:8082.</p> <ul> <li>server : db</li> <li>user : root</li> <li>password : p@ssw0rd</li> </ul>"},{"location":"dev/instance-state-machine/","title":"Instance state machine","text":"graph TB     start((Start))     start --&gt; pending     pending[PENDING]     provisioning[PROVISIONING]     provision_failed[PROVISION_FAILED]     available[AVAILABLE]     updating[UPDATING]     update_failed[UPDATE_FAILED]     deleting[DELETING]     delete_failed[DELETE_FAILED]     deleted[DELETED]     archived[ARCHIVED]     pending --&gt; provisioning     provision_ok{provision ok?}     style provision_ok fill:#80CBC4     provisioning --&gt; provision_ok     provision_ok --&gt; |No| provision_failed     provision_ok --&gt; |Yes| available     provision_failed --&gt; |retry| provisioning     available --&gt; |update| updating     update_ok{update ok?}     style update_ok fill:#80CBC4     updating --&gt; update_ok     update_ok --&gt; |No| update_failed     update_ok --&gt; |Yes| available     available --&gt; |Delete| deleting     deletion_ok{deletion ok?}     style deletion_ok fill:#80CBC4     deleting --&gt; deletion_ok     deletion_ok --&gt; |No| delete_failed     deletion_ok --&gt; |Yes| deleted     deleted --&gt; |archive| archived     delete_failed --&gt; |Retry| deleting"},{"location":"dev/release/","title":"Release new version of Squest","text":""},{"location":"dev/release/#prepare","title":"Prepare","text":"<ul> <li>Create a <code>release</code> branch</li> <li>Update the <code>CHANGELOG.md</code></li> <li>Delete all migration file since the last release in all Django app</li> <li>Make migration files</li> <li>Update <code>Squest/version.py</code> with release version</li> <li>Update version in Poetry <code>pyproject.toml</code></li> <li>PR --&gt; master</li> <li>Last review and rebase/merge master</li> </ul>"},{"location":"dev/release/#ci-execution","title":"CI execution","text":"<p>From here the CI will:</p> <ul> <li>Build the new docker image</li> <li>Push the image in quay.io</li> <li>Build and publish the mkdocs documentation into GitHub pages</li> </ul>"},{"location":"dev/release/#post-ci","title":"Post CI","text":"<ul> <li>Tag the branch with the new version and push the tag</li> <li>Create a release from the pushed tag on GitHub</li> <li>Create new dev branch</li> <li>Update <code>version.py</code> with new beta version</li> <li>Update poetry version in <code>pyproject.toml</code> with new beta version (E.g: <code>1.8.3b</code>)</li> <li>Bump poetry libraries</li> <li>Force push the new dev branch to upstream</li> <li>Notify community in Gitter</li> </ul>"},{"location":"dev/request-state-machine/","title":"Request state machine","text":"graph TB      start((Start))     submitted[SUBMITTED]     start --&gt; submitted     auto_accept{auto accept?}     style auto_accept fill:#80CBC4     instance_pending([instance pending])     submitted --&gt; instance_pending     submitted --&gt; |re-submit|submitted     instance_pending --&gt; auto_accept     accepted[ACCEPTED]     auto_accept --&gt;|Yes| accepted     admin_action_1{admin action}     style admin_action_1 fill:#80DEEA     auto_accept --&gt;|No| admin_action_1     on_hold[ON_HOLD]     admin_action_1 --&gt;|on_hold| on_hold     admin_action_1 --&gt;|cancel| canceled     admin_action_1 --&gt;|reject| rejected     admin_action_1 --&gt;|accept| accepted     rejected[REJECTED]     on_hold --&gt;|reject| rejected     canceled[CANCELED]     on_hold --&gt; |cancel|canceled     on_hold --&gt; |accept|accepted     rejected --&gt; |cancel|canceled     canceled --&gt; |delete| deleted     deleted((Deleted))     auto_pocess{auto process?}     style auto_pocess fill:#80CBC4     accepted --&gt; auto_pocess     accepted --&gt;|reject| rejected     accepted --&gt;|review| accepted     accepted --&gt;|cancel| canceled     auto_pocess --&gt; |Yes| operation_type     admin_action_2{admin action}     auto_pocess --&gt; |No| admin_action_2     admin_action_2 --&gt; |process| operation_type     style admin_action_2 fill:#80DEEA     operation_type{Operation type?}     style operation_type fill:#80CBC4     instance_creating([instance_creating])     instance_updating([instance_updating])     instance_deleting([instance_deleting])     operation_type --&gt; |CREATE| instance_creating     operation_type --&gt; |UPDATE| instance_updating     operation_type --&gt; |DELETE| instance_deleting     processing[PROCESSING]        instance_creating --&gt; processing     instance_updating --&gt; processing     instance_deleting --&gt; processing     processing_ok{processing ok?}     style processing_ok fill:#80CBC4     processing --&gt; processing_ok     complete[COMPLETE]      failed[FAILED]      processing_ok --&gt; |Yes| complete     processing_ok --&gt; |No| failed     failed --&gt; |retry| processing     failed --&gt; |review| accepted     archived[ARCHIVED]      complete --&gt;|archive| archived     archived --&gt;|unarchive| complete"},{"location":"installation/docker-compose/","title":"Docker Compose deployment","text":""},{"location":"installation/docker-compose/#deploy-squest-app","title":"Deploy Squest app","text":"<p>The docker-compose based deployment is a good way to easily and quickly test Squest. This way of deploying is also stable enough to be used in production.</p> <p>To run the Squest application, execute the <code>docker-compose.yml</code> file: <pre><code>docker-compose up\n</code></pre></p> <p>Then connect with your web browser to http://127.0.0.1:8080 The default admin account is <code>admin // admin</code></p> <p>The default export the port 8080. If you want to use the standard HTTP port 80, update the  file <code>docker-compose.override.yml</code>. <pre><code>services:\n  nginx:\n    ports:\n      - \"80:8080\"\n</code></pre></p>"},{"location":"installation/docker-compose/#tls","title":"TLS","text":"<p>This section explains how to add TLS support on Squest when using docker-compose based deployment.</p> <p>The TLS endpoint is managed by a reverse proxy on top of the default web server. This is not the only way to handle this part. Many tools like Nginx, Apache or Traefik could be used, and you are free  to use the one you want instead of this proposed configuration. The only recommendation we have is to keep the default nginx web server as main http entrypoint.</p>"},{"location":"installation/docker-compose/#using-caddy","title":"Using Caddy","text":"<p>Caddy is a powerful webserver written in Go which provide a  reverse proxy feature.</p> <p>In the example below, we'll use self-signed certificate. Follow the official documentation  if you want to configure it to use an ACME like \"Let's Encrypt\" instead.</p> <p>Place your certificate and key file in the folder <code>docker/certs</code>.</p> <p>E.g: <pre><code>docker\n\u251c\u2500\u2500 Caddyfile\n\u251c\u2500\u2500 certs\n\u2502    \u251c\u2500\u2500 squest.crt\n\u2502    \u2514\u2500\u2500 squest.key\n</code></pre></p> <p>Update the <code>docker/Caddyfile</code> with the FQDN of your server. By default, the FQDN is set to <code>squest.domain.local</code> <pre><code>squest.domain.local {   # This line should match the ALLOWED_HOSTS in your Squest environment\n    reverse_proxy nginx:8080\n    encode gzip zstd\n    tls /etc/ssl/private/squest.crt /etc/ssl/private/squest.key\n    # or:\n    # tls /etc/ssl/private/cert.pem\n\n    log {\n      level error\n    }\n}\n</code></pre></p> <p>Update the <code>ALLOWED_HOSTS</code> environment variable from the configuration file <code>docker/environment_variables/squest.env</code>  to match your FQDN. <pre><code>ALLOWED_HOSTS=squest.domain.local\n</code></pre></p> <p>Start docker compose with the TLS configuration: <pre><code>docker-compose -f docker-compose.yml -f tls.docker-compose.yml up\n</code></pre></p> <p>The squest service is then reachable via HTTP and HTTPS standard ports (80/443).</p> <ul> <li>http://squest.domain.local</li> <li>https://squest.domain.local</li> </ul>"},{"location":"installation/kubernetes/","title":"Kubernetes deployment","text":"<p>Warning</p> <p>This deployment is still a beta feature. Feel free to send pull requests to enhance the deployment or give us feedback though Gitter chat or GitHub discutions.</p>"},{"location":"installation/kubernetes/#pre-requisites","title":"Pre-requisites","text":"<p>The Kubernetes deployment is wrapped by Ansible. The code has been tested with Ansible version <code>2.15.5</code>.</p>"},{"location":"installation/kubernetes/#ansible","title":"Ansible","text":"<p>Install Ansible dependencies:</p> <pre><code>ansible-galaxy install -r k8s/requirements.yml\n</code></pre>"},{"location":"installation/kubernetes/#python","title":"Python","text":"<p>Install Python dependencies: <pre><code>pip3 install -r k8s/requirements.txt\n</code></pre></p>"},{"location":"installation/kubernetes/#helm","title":"Helm","text":"<p>Operators installation is handled by Helm. Follow the official documentation to install Helm on your workstation.</p>"},{"location":"installation/kubernetes/#ansible-inventory","title":"Ansible inventory","text":"<p>An example inventory file is present in <code>k8s/inventory/group_vars/all/squest.yml</code>.</p> <p>For a minimal installation  you need to at least provide information concerning your Kubernetes environment <pre><code>k8s_kubeconfig_path: \"/path/to/kubeconfig\"\nk8s_cluster_fqdn: \"k8s.domain.local\"\nsquest_namespace: \"squest\"\nk8s_storage_class: \"thin\"\n</code></pre></p>"},{"location":"installation/kubernetes/#deploy-squest-using-ansible","title":"Deploy Squest using Ansible","text":"<p>Run the <code>deploy</code> playbook against your inventory config file:</p> <pre><code>cd k8s\nansible-playbook -v -i inventory deploy.yml\n</code></pre> <p>Tags:</p> Name Description namespace Create the Squest namespace utils Install CRD utils (certmanager, Prometheus) db Deploy mariadb CRDs, operator and server rabbitmq Deploy rabbitmq CRDs, operator and service redis Deploy redis CRDs, operator and service django Deploy Squest application celery Deploy Celery components (worker and beat) maintenance Deploy nginx maintenance pod backup Deploy backup cron jobs <p>Note</p> <p>By default, the deployment uses nginx ingress controller to configure the Squest external access on <code>squest.{{ k8s_cluster_fqdn }}</code>.</p>"},{"location":"installation/kubernetes/#configuration","title":"Configuration","text":""},{"location":"installation/kubernetes/#squest-config","title":"Squest config","text":"<p>The Squest configuration is injected as environment variables. The environment is placed in <code>squest.yml</code> as <code>env</code> flag like the following: <pre><code>squest_django:\n  env:\n    TZ: \"Europe/Paris\"\n    DB_HOST: \"mariadb\"\n    DB_PORT: \"3306\"\n    REDIS_CACHE_HOST: \"rfrm-redis\"\n    DEBUG: \"true\"\n    DB_USER: \"{{ squest_db.user }}\"\n    DB_PASSWORD: \"{{ squest_db.password }}\"\n    WAIT_HOSTS: \"mariadb:3306,rabbitmq:5672\"\n</code></pre></p>"},{"location":"installation/kubernetes/#use-your-own-ingress","title":"Use your own ingress","text":"<p>By default, the playbook will configure an ingress that point to <code>squest.{{ k8s_cluster_fqdn }}</code> based on the nginx ingress controller.</p> <p>To expose the Squest URL by using your own ingress controller, you can either update <code>annotations</code> (when the target controller can be managed by annotations) or disable the default ingress to declare then your ingress rules on your own.</p> <p>To disable the default ingress configuration, in the <code>squest.yml</code> inventory file: <pre><code>squest_django:\n  image: \"quay.io/hewlettpackardenterprise/squest:latest\"\n  ingress:\n    enabled: false\n</code></pre></p>"},{"location":"manual/access/","title":"Access","text":"<p>Squest accesses are managed by following levels:</p> flowchart TD     Global --&gt; Organizations --&gt; Teams --&gt; Users     Organizations --&gt; Users"},{"location":"manual/access/#global-scopes","title":"Global scopes","text":"<p>Global scopes are permissions that are set to a particular user on the \"Global\" level. A permission set as this level is granted across all organizations and teams.</p>"},{"location":"manual/access/#organizations-and-teams","title":"Organizations and Teams","text":"<p>Organization is a scope that may contain Teams and Users. Teams are group of user that belong to an Organization.</p> <p>Note</p> <p>A user need to be present into an organization in order to be added to a team </p>"},{"location":"manual/access/#default-roles","title":"Default roles","text":"<p>When creating an organization or a team, default roles can be assigned. Those roles are automatically granted to each user added then to the Organization/Team. For example, setting \"Instance Viewer\" as default role will allow every member of the Organization to see all created instance from the service catalog.</p>"},{"location":"manual/access/#rbac","title":"RBAC","text":"<p>RBAC (Role Based Access Control) allows to set some roles to users of an organization or a team.</p>"},{"location":"manual/access/#quota","title":"Quota","text":"<p>When an attribute is defined in the resource tracker it becomes automatically available as a quota in organizations or teams.</p> <p>When a request is made with a survey field attached to a quota, then the value is limited to the current quota available. Once the request is accepted, the created resource is linked to the service catalog instance and the available quota limit is updated.</p> <p>Warning</p> <p>The quota depend on created resources in the resource tracking. In order to use a quota, each instance of the service catalog need to be linked to a resource of the resource tracking. Example here.</p> <ul> <li>Quota can be set at organization or team level.</li> <li>Each organization can dispatch the given quota to their teams</li> <li>Quotas can be reorganized at anytime across the teams as long as no instance are using them</li> </ul> <p></p>"},{"location":"manual/notifications/","title":"Notifications","text":"<p>Note</p> <p>Squest current notification system only support emails.</p>"},{"location":"manual/notifications/#enable-or-disable-notifications","title":"Enable or disable notifications","text":"<p>By default, notifications are enabled. You can disable all notifications from your profile page by accessing the profile page in the top right corner of the Squest application.</p>"},{"location":"manual/notifications/#notification-filters","title":"Notification filters","text":"<p>Notifications are sent by default for all events. Filters can be added to limit notifications to some criteria: </p> <ul> <li>Services</li> <li>Operations</li> <li>Request states</li> <li>Instance states</li> <li>On instance spec conditions (when)</li> </ul> <p>When a filter is declared, all criteria in the filter must be valid to send a notification. For example, if a service and an operation is defined both need to be valid. </p> <p>Example behavior with 2 criteria defined: <pre><code>service1 AND operation2\n</code></pre></p> <p>When multiple item are selected for a particular criteria, only one item need to match to validate the criteria.</p> <p>Example behavior when setting multiple service and multiple operation: <pre><code>(service1 OR service2) AND (operation2 OR operation2)\n</code></pre></p>"},{"location":"manual/notifications/#when-ansible-like-conditions","title":"When: Ansible like conditions","text":"<p>The <code>when</code> condition allows to filter notification based on current \"request\". The syntax is the same as the one used in Ansible. The <code>request</code> object is directly usable as context in the condition without JINJA double-curly braces. See the Jinja documentation for more example.</p> <p>E.g with a 'when' based on the survey filled by the user <pre><code>request.fill_in_survey['location'] == 'grenoble'\n</code></pre></p> <p>E.g with instance spec <pre><code>request.instance.spec['spec_key1'] == 'spec_value1'\n</code></pre></p>"},{"location":"manual/administration/approval_workflow/","title":"Approval workflows","text":"<p>By default, Requests can be approved by any user which has the <code>accept_request</code> permission. </p> <p>Approval workflows are a way to split the request  accepting process in multiple step that can be reviewed by any user with a custom permission.</p> <p>Approval workflow can be scoped to some organization or team so a same operation can be requested differently following who is asking it.</p> <p>Each step may have a part of the required operation's survey. </p> <p></p>"},{"location":"manual/administration/approval_workflow/#workflows","title":"Workflows","text":"<p>An Approval Workflow is composed by one or multiple Approval Step. Approval Steps of the Workflow must be approved one by one following the order. After accepting the last one, the request switch to ACCEPTED state and can be processed.</p> <p>Note</p> <p>The auto-accept option can not be set in the Operation with an Approval Workflow.  This need to be configured into the step auto accept condition</p> <p>Configuration:</p> Name Description Name Unique identifier of the Approval Workflow Operation Service operation that will use the workflow Restricted scopes List of organization or team which are going to be concerned by the workflow"},{"location":"manual/administration/approval_workflow/#steps","title":"Steps","text":"<p>Steps are the breakpoint of a Squest request. Each step need to be accepted in order to validate the request.</p> <p>Configuration:</p> Name Description Name Unique identifier of the Step Permission Permission required to be allowed to accept or reject the request. By default set to <code>approve_reject_approvalstep</code> Readable field Field from the survey that will be shown in the form but cannot be updated in the step Editable  field Field from the survey that can be filled or updated from a previous step Auto accept condition An Ansible \"when\" like that enable auto accept on a Step (see below) <p>Warning</p> <p>If the job template behind the operation has some mandatory fields in its survey then those fields need to be configured in at least in one step.</p> <p>By default, Squest comes with a single permission named <code>approve_reject_approvalstep</code> that can be used in steps. </p> <p>Custom permissions can be created and added to a role to avoid using the default one. </p> flowchart LR     role --&gt; permission     step --&gt; permission     user/team/organization --&gt; role"},{"location":"manual/administration/approval_workflow/#auto-accept","title":"Auto accept","text":"<p>A step can be auto accepted on a condition placed in the \"Auto accept condition\" of the step configuration.</p> <p>The condition is a Jinja string which is evaluated like an Ansible when condition. The available context is the request.</p> <p>For example, to validate the step following the name of the instance: <pre><code>request.instance.name == 'this_is_a_very_good_name'\n</code></pre></p> <p>Or testing a survey field <pre><code>request.fill_in_survey['vCPU'] &lt; 8\n</code></pre></p> <p>Full <code>request</code> object definition can be retrieved through the API documentation.</p> <p>More example of jinja templating are available in the dedicated documentation section.</p> <p>Warning</p> <p>The auto accept process will not complete or update the survey.  If a mandatory field is missing at the end of the approval, the executed job template may fail due to missing variable.</p>"},{"location":"manual/administration/extras/","title":"Extras","text":""},{"location":"manual/administration/extras/#instancerequest-hooks","title":"Instance/Request Hooks","text":"<p>Instance/Requests hooks are a way to call a RHAAP/AWX job template following the new state of a <code>Request</code> or an <code>Instance</code>.</p> <p>For example, if you want to call a job template that performs an action everytime a <code>Request</code> switch to <code>FAILED</code> state.</p> <p>Create a RequestHook:</p> <ul> <li>name: Name of your hook</li> <li>State: The hook will be triggered when an instance of the select model type will switch to this selected state</li> <li>Job template: The RHAAP/AWX job template to execute when an instance of the selected model reach the selected state</li> <li>Extra vars: extra variable as JSON to add to the selected job template</li> </ul> <p>States documentation:</p> <ul> <li>Available states for a <code>Request</code>.</li> <li>Available states for a <code>Instance</code>.</li> </ul>"},{"location":"manual/administration/extras/#announcements","title":"Announcements","text":"<p>Announcements allow Squest administrator to notify users. Announcements are displayed to end users in the main Squest page.</p> <p>Administrator defines beginning, end, title, message and type of announcement.</p> <p>Note</p> <p>Configure your time zone.</p>"},{"location":"manual/administration/extras/#custom-links","title":"Custom links","text":"<p>Custom links allow to display hyperlinks to external content by using Squest <code>instance</code> attributes. Custom links appear as buttons in the top right corner of an instance detail page. Jinja template can be used to insert data from the current squest <code>instance</code> details like <code>instance.spec</code>.</p> <p>For example a link can be created to expose the Hypervisor URL that has been placed into the instance spec of a created resource.</p> Name Required Comment name true Name of the custom link. When <code>loop</code> is used, the name is used for the dropdown button name services true Define in which instance details page the button will appear text true Text in the button. Jinja template supported url true URL of the link. Jinja template supported button color false Color of the displayed button when false Ansible like \"when\" condition loop false Ansible like \"loop\" Enabled false Enable or disable the button Is admin only false When set to <code>true</code>, only Squest administrators can see the button"},{"location":"manual/administration/extras/#jinja-templating","title":"Jinja templating","text":"<p>Jinja templating can be used in the <code>text</code> or <code>URL</code> definition. The <code>instance</code> object of the current instance detail  page is used as context.</p> <p>Full <code>instance</code> object definition can be retrieved through the API documentation.</p> <p>Instance spec example: <pre><code>{\n  \"key1\": \"value1\"\n}\n</code></pre></p> <p>Button text example: <pre><code>Button {{ instance.name }}\n</code></pre></p> <p>Button url example: <pre><code>https://external_resource.domain/?name={{ instance.spec.key1 }}\n</code></pre></p> <p>Rendered button with an instance named \"k8S ns test\": <pre><code>&lt;a href=\"https://external_resource.domain/?name=value1\"&gt;Button k8S ns test&lt;/a&gt;\n</code></pre></p>"},{"location":"manual/administration/extras/#when-condition","title":"When condition","text":"<p>The when condition allow to display the button only on certain condition like the \"when\" flag on Ansible.</p> <p>E.g: <pre><code>spec['configvar'] == 'value' and user_spec['other'] == 'value'\n</code></pre></p> <p>Note</p> <p>Like for Ansible, double curly braces are not used in 'when' declaration.</p>"},{"location":"manual/administration/extras/#loop","title":"Loop","text":"<p>When the loop definition is set, a dropdown button is created with a link for each element of the given list. Like for Ansible, the element is exposed as <code>item</code> in the Jinja template of the button text or URL.</p> <p>Instance spec example: <pre><code>{\n  \"my_list\": [\n    \"item1\",\n    \"item2\"\n  ]\n}\n</code></pre></p> <p>Loop example: <pre><code>{{ instance.spec.my_list }}\n</code></pre></p> <p>Button text example: <pre><code>name: {{ item }}\n</code></pre></p> <p>Button url example: <pre><code>https://external_resource.domain/{{ item }}\n</code></pre></p> <p>Rendered links into the dropdown button: <pre><code>&lt;a href=\"https://external_resource.domain/item1\"&gt;name: item1&lt;/a&gt;\n&lt;a href=\"https://external_resource.domain/item2\"&gt;name: item2&lt;/a&gt;\n</code></pre></p>"},{"location":"manual/administration/extras/#email-template","title":"Email template","text":"<p>The Email template functionality allows Squest administrators to craft a message intended for future delivery to a selected group of Squest users via email.</p> <p>Emails are composed a title and an HTML content.</p> <p>Optionally, it is possible to establish filters such as services, instance states, and quota scopes, which can be employed to refine the ultimate recipient list. When the email is dispatched, Squest will present a list of users that align with the specified filters.</p> <p>Note</p> <p>The act of creating a template does not result in the sending of any emails. After a template has been created, the \"send\" button grants the administrator the ability to make modifications to the ultimate list of users before initiating the email dispatch.</p> <p>A when condition can be also added to filter instances of the same service to particular criteria based for example on the instance specs. Example of <code>when</code> condition: <pre><code>instance.user_spec.location == 'grenoble'\n</code></pre></p>"},{"location":"manual/administration/rbac/","title":"RBAC (Role Based Access Control)","text":"<p>Role-based access control (RBAC), is a mechanism that restricts Squest access. It involves setting permissions to enable access to authorized users. Permissions are then grouped into Roles and given to a scope which can be a team or and organizations or global. RBAC is the link between a role, a scope and a user.</p> <p>The Squest RBAC system enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in Squest.</p> <p></p>"},{"location":"manual/administration/rbac/#permissions","title":"Permissions","text":"<p>Permission in Squest represent a relationship with following components:</p> <ul> <li>Name: A short description of the permission.</li> <li>Codename: A unique identifier for the permission with camel case format.</li> <li>Content type: A Squest object (E.g: Request, Instance)</li> </ul> <p>For example, a permission named \"Can request a day2 operation on instance\" attached to the content type \"instance\". This permission is required, like the name is suggesting, to create a request for a day 2 operation on an existing instance.</p> <p>All objects have generic CRUD (Create, Retrieve/List, Update, Delete) permissions by default:</p> <ul> <li><code>create_object</code> to create the object</li> <li><code>view_object</code> to retrieve the object</li> <li><code>list_object</code> to list object instances</li> <li><code>change_object</code> to update the object</li> <li><code>delete_object</code> to delete the object</li> </ul> <p>Note</p> <p>Full permission list is available in the RBAC section of your Squest instance.</p> <p>Specific Squest permissions:</p> Short description Codename Object Can add users in global scope add_users_globalscope globalscope Can delete users in global scope delete_users_globalscope globalscope Can view users in global scope view_users_globalscope globalscope Can add users in organization add_users_organization organization Can delete users in organization delete_users_organization organization Can view users in organization view_users_organization organization Can consume quota of the scope consume_quota_scope scope Can add users in team add_users_team team Can delete users in team delete_users_team team Can view users in team view_users_team team Can approve/reject an approval step approve_reject_approvalstep approvalstep Can view admin custom link view_admin_customlink customlink Can request an admin day2 operation on instance admin_request_on_instance instance Can archive instance archive_instance instance Can change admin spec on instance change_admin_spec_instance instance Can request a day2 operation on instance request_on_instance instance Can unarchive instance unarchive_instance instance Can view admin spec on instance view_admin_spec_instance instance Can accept request accept_request request Can archive request archive_request request Can cancel request cancel_request request Can hold request hold_request request Can process request process_request request Can reject request reject_request request Can re-submit request re_submit_request request Can unarchive request unarchive_request request Can request an admin operation on service admin_request_on_service service Can request operation on service request_on_service service Can close support close_support support Can reopen support reopen_support support Can sync RHAAP/AWX sync_towerserver towerserver <p>Note</p> <p>New permissions can be created in the context of approval steps. </p>"},{"location":"manual/administration/rbac/#global-permissions","title":"Global permissions","text":"<p>Global permissions are permissions granted to all logged Squest user. Permissions are purely additive (there are no \" deny\" rules).</p> <p>Warning</p> <p>Changing the list of global permissions may impact the global bahavior of Squest. Use with caution.</p>"},{"location":"manual/administration/rbac/#owner-permissions","title":"Owner permissions","text":"<p>Owner permissions are permissions granted to the owner of an Instance, Request or Support.</p> <p>Are considered as owner:</p> <ul> <li><code>requester</code> for Instance</li> <li><code>user</code> for Request</li> <li><code>opened_by</code> for Support</li> </ul> <p>Configuring \"view_instance\" permissions within the Owner Permissions will grant users the ability to see all instances for which they are the requester. Adding \"view_support\" permission will grant users the ability to see all supports related to their instances and supports they opened.</p> <p>Warning</p> <p>Changing the list of owner permissions may impact the global bahavior of Squest. Use with caution.</p>"},{"location":"manual/administration/rbac/#roles","title":"Roles","text":"<p>A role is a set of permissions. After creating a Role, you can assign it to a user though a team, an organization or globally.</p> <p>Giving a role to a scope gives permissions to all underlying objects of the scope.</p> <p></p>"},{"location":"manual/administration/rhaap/","title":"RHAAP/AWX","text":"<p>Squest need to be connected to a RHAAP (Red Hat Ansible Automation Platform) or AWX controller in order to work.</p> <p>Operations in Squest services are actually pointers to job templates in those controllers.</p> <p>Squest will need a token in order to communicate to the API of your RHAAP/AWX instance.</p>"},{"location":"manual/administration/rhaap/#rhaapawx-configuration","title":"RHAAP/AWX configuration","text":"<p>Create an application:</p> <p>On RHAAP/AWX, go in Application menu and create a new app with the following configuration:</p> <ul> <li>name: squest</li> <li>Organization: Default  </li> <li>Authorization grant type: Resource owner password based</li> <li>Client type: Confidential</li> </ul> <p>Create a token: </p> <ul> <li>Go in your Profile page (top right corner), go into the tokens section</li> <li>Click add button</li> <li>Search for the \"squest\" application created previously and select it</li> <li>Give a scope \"write\"</li> <li>Save and copy the generated token. This will be the token to give to Squest when creating a new RHAAP/AWX server instance.</li> </ul>"},{"location":"manual/administration/rhaap/#add-a-controller-in-squest","title":"Add a controller in Squest","text":"<p>Configuration:</p> Name Description Name Short name of the RHAAP/AWX controller Host FQDN of the server to connect with the port (no protocol). <code>E.g: awx.mydomain.net:8043</code> Token Token created from the previous section Is secure Enable this flag if the protocol is HTTPS (by default) SSL verify Enable this flag to check the server certificate Extra vars Add extra vars in json format that will be sent on every job of this controller"},{"location":"manual/advanced/field_validators/","title":"Field validators","text":"<p>Warning</p> <p>Field validators feature is now deprecated. Please use survey validator instead.</p> <p>Field validators are Python modules that can be added as plugin to perform custom checks on an operation survey field.</p>"},{"location":"manual/advanced/field_validators/#create-a-field-validator","title":"Create a field validator","text":"<p>Validators are based on the Django and Django Rest Framework API.</p> <ul> <li>Django validators doc</li> <li>Django Rest framework validators doc</li> </ul> <p>Create a python file that contains 2 methods that receive a value as parameter. The methods must be named <code>validate_api</code> and <code>validate_ui</code>. Validators methods takes a value and raises a ValidationError if it does not meet some criteria.</p> <p>The <code>validate_api</code> must raise a <code>django.core.exceptions.ValidationError</code> in case of error.</p> <p>The <code>validate_ui</code> must raise a <code>rest_framework.serializers.ValidationError</code> in case of error.</p> <p>Here is an example of file that check if the given value of the field is even: <pre><code>from django.core.exceptions import ValidationError\nfrom rest_framework import serializers\nfrom django.utils.translation import ugettext as _\n\n\ndef validate_api(value):\n    if int(value) % 2 != 0:\n        raise serializers.ValidationError('This field must be an even number.')\n\n\ndef validate_ui(value):\n    try:\n        if int(value) % 2 != 0:\n            raise ValidationError(\n                _('%(value)s is not an even number'),\n                params={'value': value},\n            )\n    except ValueError:\n        # given value cannot be cast into an integer\n        pass\n</code></pre></p>"},{"location":"manual/advanced/field_validators/#add-your-validators-to-the-deployment","title":"Add your validators to the deployment","text":"<p>Place your scripts in a folder on the machine that host Squest. E.g: <pre><code>tree /tmp/squest_plugins \n\n/tmp/squest_plugins\n\u2514\u2500\u2500 field_validators\n    \u251c\u2500\u2500 even_number.py\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 superior_to_10.py\n</code></pre></p> <p>Update the <code>docker-compose.yml</code> file to add a volume that map your script folder to the plugin folder in the Django container: <pre><code>  django: &amp;django\n    image: quay.io/hewlettpackardenterprise/squest:latest\n    env_file: docker/environment_variables/squest.env\n    environment:\n      WAIT_HOSTS: db:3306,rabbitmq:5672\n    volumes:\n      - django_static:/app/static\n      - django_media:/app/media\n      - backup:/app/backup\n      - /tmp/squest_plugins/field_validators:/app/plugins/field_validators  # update this line\n    depends_on:\n      - db\n      - rabbitmq\n      - celery-worker\n      - celery-beat\n      - redis-cache\n</code></pre></p>"},{"location":"manual/advanced/field_validators/#set-validator-to-a-form-field","title":"Set validator to a form field","text":"<p>In squest, go into <code>Service Catalog --&gt; Manage Services --&gt; Operations --&gt; Survey</code></p> <p>For each field of the RHAAP/AWX survey of the selected operation you can now add one or more validator.</p>"},{"location":"manual/advanced/filters/","title":"JSON Accessor","text":"<p>In the Squest UI, certain pages offer filtering options based on JSON accessors. For instance, the instance list page allows filtering based on instance specs.</p> <p>To access a field in json, simply describe the path by separating the levels by dots. The value of field to filter must be after an equal. It is possible to make a filter on several fields which are separated by commas.</p>"},{"location":"manual/advanced/filters/#examples","title":"Examples","text":""},{"location":"manual/advanced/filters/#instance-spec-with-string","title":"Instance spec with string","text":"<pre><code>{\n  \"vm_name\": \"vm001\"\n}\n</code></pre> <p>Examples of lookup string that can be used in the filter.</p> <pre><code>vm_name=vm001\nvm_name='vm001'\nvm_name=\"vm001\"\n</code></pre>"},{"location":"manual/advanced/filters/#instance-spec-with-dict","title":"Instance spec with dict","text":"<pre><code>{\n  \"openstack\": {\n    \"cluster_name\": \"cluster_perf\"\n  }\n}\n</code></pre> <p>Example of lookup string that can be used in the filter.</p> <pre><code>openstack.cluster_name=cluster_perf\n</code></pre>"},{"location":"manual/advanced/filters/#instance-spec-with-list","title":"Instance spec with list","text":"<pre><code>{\n  \"vm_disk\": [\n    \"disk01\",\n    \"disk02\"\n  ]\n}\n</code></pre> <p>Example of lookup string that can be used in the filter.</p> <pre><code>vm_disk.0=disk01\n</code></pre>"},{"location":"manual/advanced/filters/#instance-spec-on-two-fields","title":"Instance spec on two fields","text":"<pre><code>{\n  \"my_first_field\": {\n    \"my_second_field\": [\n      \"my_value1\",\n      \"my_value2\"\n    ]\n  },\n  \"my_integer_field\": 1\n}\n</code></pre> <p>Example of lookup string that can be used in the filter.</p> <pre><code>my_first_field.my_second_field.0=my_value1,my_integer_field=1\n</code></pre>"},{"location":"manual/advanced/filters/#instance-spec-with-regex","title":"Instance spec with regex","text":"<pre><code>{\n  \"dns_name\": \"my_hostname.domain.example\"\n}\n</code></pre> <p>Lookup string example:</p> <pre><code>dns_name.regex=my_hostname\n</code></pre>"},{"location":"manual/advanced/jinja/","title":"Jinja templating","text":"<p>Jinja templating is applicable within specific sections of the Squest configuration. For example, Jinja templating enables the prefilling of a survey field for a day 2 operation using the specs of the instance.</p> <p>Jinja templating usage with <code>{{ instance }}</code> as context:</p> <ul> <li>Custom links</li> <li>Operation survey default field config</li> </ul> <p>Jinja templating usage with <code>{{ request }}</code> as context:</p> <ul> <li>Operation job template config (inventory, credentials, tags, limit)</li> <li>Approval workflow step</li> </ul> <p>Jinja templating usage with <code>{{ user }}</code> as context:</p> <ul> <li>Operation survey default field config</li> </ul>"},{"location":"manual/advanced/jinja/#examples","title":"Examples","text":""},{"location":"manual/advanced/jinja/#string-with-no-jinja","title":"String with no jinja","text":"<p>Even if the context is sent, a hard coded string can be used without using it.</p> Jinja string My hard coded value Result My hard coded value"},{"location":"manual/advanced/jinja/#using-the-instance-as-context","title":"Using the instance as context","text":"<p>Accessing instance name:</p> Instance context <pre><code>{\n    \"id\": 1,\n    \"state\": 10,\n    \"resources\": [],\n    \"requester\": {\n        \"id\": 3,\n        \"username\": \"admin@squest.com\",\n        \"email\": \"admin@squest.com\",\n        \"profile\": {\n            \"request_notification_enabled\": true,\n            \"instance_notification_enabled\": true,\n            \"request_notification_filters\": [],\n            \"instance_notification_filters\": []\n        },\n        \"first_name\": \"admin\",\n        \"last_name\": \"squest\",\n        \"is_staff\": true,\n        \"is_superuser\": true,\n        \"is_active\": true,\n        \"groups\": []\n    },\n    \"quota_scope\": {\n        \"id\": 1,\n        \"rbac\": [],\n        \"name\": \"test_scope\",\n        \"description\": \"\",\n        \"roles\": []\n    },\n    \"name\": \"test\",\n    \"spec\": {\n        \"os\": \"linux\"\n    },\n    \"user_spec\": {\n        \"vCPU\": 2,\n        \"memory\": 4,\n    },\n    \"date_available\": null,\n    \"service\": 1\n}\n</code></pre> Jinja string My hard coded value with {{ instance.name }} Result My hard coded value with my_instance <p>Accessing instance spec:</p> Instance context <pre><code>{\n    \"id\": 1,\n    \"state\": 10,\n    \"resources\": [],\n    \"requester\": {\n        \"id\": 3,\n        \"username\": \"admin@squest.com\",\n        \"email\": \"admin@squest.com\",\n        \"profile\": {\n            \"request_notification_enabled\": true,\n            \"instance_notification_enabled\": true,\n            \"request_notification_filters\": [],\n            \"instance_notification_filters\": []\n        },\n        \"first_name\": \"admin\",\n        \"last_name\": \"squest\",\n        \"is_staff\": true,\n        \"is_superuser\": true,\n        \"is_active\": true,\n        \"groups\": []\n    },\n    \"quota_scope\": {\n        \"id\": 1,\n        \"rbac\": [],\n        \"name\": \"test_scope\",\n        \"description\": \"\",\n        \"roles\": []\n    },\n    \"name\": \"test\",\n    \"spec\": {\n        \"os\": \"linux\"\n    },\n    \"user_spec\": {\n        \"vCPU\": 2,\n        \"memory\": 4,\n    },\n    \"date_available\": null,\n    \"service\": 1\n}        \n</code></pre> Jinja string  {{ instance.spec.os }} Result linux <p>Note</p> <p>The <code>spec</code> and <code>user_spec</code> variables are only usable on Update or Delete operations as the pending instance does not contain any spec before its provisioning.</p> <p>Note</p> <p>If the given variable key doesn't exist, the default value will be set to an empty string.</p>"},{"location":"manual/advanced/jinja/#using-the-request-as-context","title":"Using the request as context","text":"<p>This example, used in the \"default limit\" of the operation job template config, allows to automatically configure the inventory limit following the given \"dns\" field of the survey.</p> Instance context <pre><code>{\n    \"id\": 1,\n    \"instance\": {\n        \"id\": 1,\n        \"state\": 10,\n        \"resources\": [],\n        \"requester\": {\n            \"id\": 3,\n            \"username\": \"admin@squest.com\",\n            \"email\": \"admin@squest.com\",\n            \"profile\": {\n                \"request_notification_enabled\": true,\n                \"instance_notification_enabled\": true,\n                \"request_notification_filters\": [],\n                \"instance_notification_filters\": []\n            },\n            \"first_name\": \"admin\",\n            \"last_name\": \"squest\",\n            \"is_staff\": true,\n            \"is_superuser\": false,\n            \"is_active\": true,\n            \"groups\": []\n        },\n        \"quota_scope\": {\n            \"id\": 1,\n            \"rbac\": [],\n            \"created\": \"2023-09-15T14:39:00.662779+02:00\",\n            \"last_updated\": \"2023-09-15T14:39:00.675268+02:00\",\n            \"name\": \"test\",\n            \"description\": \"\",\n            \"roles\": []\n        },\n        \"created\": \"2023-09-15T14:39:03.321285+02:00\",\n        \"last_updated\": \"2023-09-15T14:39:03.367724+02:00\",\n        \"name\": \"test\",\n        \"spec\": {\n        \"os\": \"linux\"\n    },\n    \"user_spec\": {\n        \"vCPU\": 2,\n        \"memory\": 4,\n    },\n        \"date_available\": null,\n        \"service\": 1\n    },\n    \"user\": {\n        \"id\": 3,\n        \"username\": \"admin@squest.com\",\n        \"email\": \"admin@squest.com\",\n        \"profile\": {\n            \"request_notification_enabled\": true,\n            \"instance_notification_enabled\": true,\n            \"request_notification_filters\": [],\n            \"instance_notification_filters\": []\n        },\n        \"first_name\": \"admin\",\n        \"last_name\": \"squest\",\n        \"is_staff\": true,\n        \"is_superuser\": true,\n        \"is_active\": true,\n        \"groups\": []\n    },\n    \"created\": \"2023-09-15T14:39:03.545051+02:00\",\n    \"last_updated\": \"2023-09-15T14:39:03.590197+02:00\",\n    \"fill_in_survey\": {\n        \"vm_os\": \"rhel8.5\"\n    },\n    \"admin_fill_in_survey\": {},\n    \"date_submitted\": \"2022-08-30T14:46:05.856352+02:00\",\n    \"date_complete\": \"2022-08-30T17:05:05.356421+02:00\",\n    \"date_archived\": null,\n    \"tower_job_id\": 1,\n    \"state\": 7,\n    \"operation\": 9,\n    \"accepted_by\": null,\n    \"processed_by\": null,\n    \"approval_workflow_state\": null\n}         \n</code></pre> Jinja string  {{ request.fill_in_survey.dns }} Result vm-name.domain.com"},{"location":"manual/advanced/jinja/#dict-access","title":"Dict access","text":"Instance JSON spec <pre><code>{\n    \"spec\": {\n        \"os\": {\n            \"linux\": \"ubuntu\"\n        }\n    }               \n}\n</code></pre> Jinja string {{ instance.spec.os['linux'] }} Result ubuntu"},{"location":"manual/advanced/jinja/#list-access","title":"List access","text":"Instance JSON spec <pre><code>{\n    \"spec\": {\n        \"os\": [\"linux\", \"windows\"]\n    },\n    \"user_spec\": {}\n}\n</code></pre> Jinja string {{ spec.os[1] }} Result windows"},{"location":"manual/advanced/jinja/#filters","title":"Filters","text":"<p>Jinja filters can also be used to transform variables.</p> <p>For example, the 'select multiple' field type requires a list of string separated with a carriage return marker (<code>\\n</code>).</p> Instance JSON spec <pre><code>{\n    \"spec\": {\n        \"os\": [\"linux\", \"windows\"]\n    },\n    \"user_spec\": {}\n}\n</code></pre> Jinja string {{ spec.os | join('\\n') }} Result linux\\nwindows"},{"location":"manual/advanced/jinja/#conditions","title":"Conditions","text":"<p>In this example, the target inventory ID is changed following a survey variable <code>is_prod</code>.</p> Instance JSON spec <pre><code>{\n    \"spec\": {\n        \"is_prod\": true\n    },\n    \"user_spec\": {}\n}\n</code></pre> Jinja string {% if is_prod %}1{% else %}3{% endif %} Result linux\\nwindows"},{"location":"manual/advanced/ldap/","title":"LDAP","text":""},{"location":"manual/advanced/ldap/#default-configuration","title":"Default configuration","text":"<p>The configuration is loaded from environment variables file placed in the folder <code>docker/environment_variables</code>. Retrieve environment variables from the Squest configuration settings documentation</p>"},{"location":"manual/advanced/ldap/#advanced-configuration","title":"Advanced configuration","text":"<p>LDAP can be activated by setting the environment variable <code>LDAP_ENABLED</code> to <code>True</code> in your configuration: <pre><code>LDAP_ENABLED=True\n</code></pre></p> <p>You can overide the given configuration by using the <code>ldap.docker-compose.yml</code> file and mount your custom <code>ldap_config.py</code>. The configuration is based on the Django plugin <code>django-auth-ldap</code>. You can follow the official documentation to know available configuration options.</p> <p>Example of <code>ldap_config.py</code>:</p> <pre><code>import os\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch\n\nprint(\"LDAP config loaded\")\n# -----------------------\n# LDAP auth backend\n# -----------------------\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com:636\"\nAUTH_LDAP_BIND_DN = \"CN=my_app,OU=Service_Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = os.environ.get('AUTH_LDAP_BIND_PASSWORD', None)\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"OU=Service_Accounts,DC=example,DC=com\", ldap.SCOPE_SUBTREE, \"(uid=%(user)s)\")\nLDAP_CA_FILE_PATH = \"/usr/local/share/ca-certificates/ldap_ca.crt\"  # default path in ldap docker compose file\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_X_TLS_CACERTFILE: LDAP_CA_FILE_PATH,\n    ldap.OPT_X_TLS_REQUIRE_CERT: ldap.OPT_X_TLS_ALLOW,\n    ldap.OPT_X_TLS_NEWCTX: 0\n}\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n    \"email\": \"uid\"\n}\n</code></pre>"},{"location":"manual/advanced/ldap/#use-custom-config","title":"Use custom config","text":""},{"location":"manual/advanced/ldap/#docker-compose","title":"Docker compose","text":"<p>Update the <code>ldap.docker-compose.yml</code> file to mount your configuration file and the CA certificate of the LDAP server (if LDAPS is used) in django and celery containers: <pre><code>  django:\n    volumes:\n      - ./Squest/ldap_config.py:/app/Squest/ldap_config.py\n      - ./docker/certs/ldap_ca.crt:/usr/local/share/ca-certificates/ldap_ca.crt\n  celery-worker:\n    volumes:\n      - ./Squest/ldap_config.py:/app/Squest/ldap_config.py\n      - ./docker/certs/ldap_ca.crt:/usr/local/share/ca-certificates/ldap_ca.crt\n  celery-beat:\n    volumes:\n      - ./Squest/ldap_config.py:/app/Squest/ldap_config.py\n      - ./docker/certs/ldap_ca.crt:/usr/local/share/ca-certificates/ldap_ca.crt\n</code></pre></p> <p>Run docker compose with the ldap config <pre><code>docker-compose -f docker-compose.yml -f docker-compose.override.yml -f ldap.docker-compose.yml up\n</code></pre></p>"},{"location":"manual/advanced/ldap/#kubernetes","title":"Kubernetes","text":"<p>Declare your custom configuration file in the <code>squest_django</code> section of <code>squest.yml</code> inventory:</p> <pre><code>squest_django:\n  ldap:  # extra ldap config\n    ldap_config_file: \"{{ lookup('file', playbook_dir + '/../Squest/ldap_config.py') }}\"\n</code></pre> <p>Push the new configuration <pre><code>ansible-playbook -v -i inventory deploy.yml --tags django\n</code></pre></p> <p>Rollout django pod <pre><code>kubectl rollout restart -n squest deployment/django\n</code></pre></p>"},{"location":"manual/advanced/survey_validators/","title":"Survey validators","text":"<p>Survey validators are Python modules that can be added as plugin. It allows users to implement their own validation logic on a day1 or day2 operation against the full survey.</p>"},{"location":"manual/advanced/survey_validators/#creating-survey-validator","title":"Creating survey validator","text":"<p>Create a Python file in SURVEY_VALIDATOR_PATH (default is <code>plugins/survey_validators</code>). Create Python class that inherit from SurveyValidator with a method <code>validate_survey</code>.</p> <pre><code># plugins/survey_validators/MySurveyValidator.py\nfrom service_catalog.forms import SurveyValidator\n\nclass MyCustomValidatorFoo(SurveyValidator):\n    def validate_survey(self):\n        # Implement your own logic here\n        pass\n</code></pre>"},{"location":"manual/advanced/survey_validators/#surveyvalidator-attributes","title":"SurveyValidator attributes","text":""},{"location":"manual/advanced/survey_validators/#survey","title":"survey","text":"<p>This is a dict containing survey + request_comment. Keys are variable name. type: dict</p> <pre><code>&gt;&gt;&gt; print(self.survey)\n{\n  \"request_comment\": \"commentary sent by user\"\n  \"ram_gb\": 8,\n  \"vcpu\": 4\n}\n</code></pre>"},{"location":"manual/advanced/survey_validators/#user","title":"user","text":"<p>User requesting operation. type: django.contrib.auth.models.User</p>"},{"location":"manual/advanced/survey_validators/#operation","title":"operation","text":"<p>Operation requested.  type: service_catalog.models.Operation</p>"},{"location":"manual/advanced/survey_validators/#instance","title":"instance","text":"<p>Instance targeted. type: service_catalog.models.Instance</p> <p>Note</p> <p>For day 1 operation <code>self.instance</code> is a FakeInstance object that contains only name and quota_scope without <code>save</code> method. The real Instance object is created after validation.</p>"},{"location":"manual/advanced/survey_validators/#surveyvalidator-method","title":"SurveyValidator method","text":""},{"location":"manual/advanced/survey_validators/#validate_surveyself","title":"validate_survey(self)","text":"<p>Redefine it to implement your own logic.</p>"},{"location":"manual/advanced/survey_validators/#failself-message-field__all__","title":"fail(self, message, field=\"__all__\")","text":"<p>Raise an exception and display message on UI/API.</p>"},{"location":"manual/advanced/survey_validators/#set-validator-to-a-form-field","title":"Set validator to a form field","text":"<p>In Squest, edit an Operation to set validators. Multiples validators can be added, validators are executed in alphabetical order by script name and class name.</p>"},{"location":"manual/advanced/survey_validators/#example","title":"Example","text":"<p>This validator will always fail if:</p> <ul> <li>ram and cpu are both equal 1</li> <li>It's not the weekend yet</li> </ul> <pre><code>from service_catalog.forms import SurveyValidator\nimport datetime\n\nclass ValidatorForVM(SurveyValidator):\n    def validate_survey(self):\n        if self.survey.get(\"ram\") == 1 and  self.survey.get(\"vcpu\") == 1:\n            self.fail(\"Forbidden: you cannot use ram=1 and cpu=1\")\n\n        weekday = datetime.datetime.today().weekday()        \n        if weekday &lt; 5:            \n            self.fail(\"Sorry it's not the weekend yet\")\n</code></pre>"},{"location":"manual/resource_tracking/attributes/","title":"Attributes","text":"<p>Attributes are variable definition of a Resource. Attribute are declared once and can then be used by Resource Group.</p> <p>For example, to manage Kubernetes namespace (as Resource Group) you could create following attributes:</p> <ul> <li>request.cpu</li> <li>request.memory</li> <li>limit.cpu</li> <li>limit.memory</li> </ul> <p>Attributes can be linked to services. Then can be used by operation survey fields.</p>"},{"location":"manual/resource_tracking/attributes/#attributes-and-quota","title":"Attributes and quota","text":"<p>Attributes are defined in the resource tracking and then </p> <ul> <li>Set as quota on organizations or teams</li> <li>Attached to fields of the survey of an operation in the service catalog</li> </ul> <p></p> <p>So when a user make a request for a new service in the service catalog, some fields from the survey can be limited to the quota defined behind the attribute.</p> <p>When a resource is linked to an instance of the service catalog, the quota consumed is automatically updated.</p>"},{"location":"manual/resource_tracking/concept/","title":"Resource tracking","text":"<p>Nowadays, IT infrastructures are composed of multiple layers. Physical servers, virtual machines, containers, storage,... Each layer is consumer or a producer of resources of another layer. As an IT administrator, we need to monitor resource consumption of a top layers to be sure that we can provide  services on underlying layers. </p> <p>The resource tracking feature allows to monitor reserved resources and highlight available resource in an infrastructure. It's also a way to set quota to </p> <p>Note</p> <p>This feature is not a real time monitoring. It does not connect to you infrastructure to check the real  consumption but help to follow what resources have been reserved to avoid overallocation when accepting new request  from the service catalog.</p>"},{"location":"manual/resource_tracking/concept/#concept","title":"Concept","text":""},{"location":"manual/resource_tracking/concept/#vm-tracking-example","title":"VM tracking example","text":"<p>To introduce the concept of attributes, resources and resource groups, lets take the example of a virtualization stack.</p> <p>A virtualization stack is composed of a group of physical machines, that are added to an hypervisor and create what we usually call a \"cluster\". The cluster would be, in Squest, a Resource Group.</p> <p>Everytime we add a new physical machine to the cluster, the total amount of resource available increases. A machine is, in this case, a Resource of the Resource Group.</p> <p>The amount of resource correspond to the physical server specifications like <code>CPU</code>, <code>memory</code> or <code>disk</code>. Those specs are the Attributes of a Resource.</p> <p></p> <p>Starting from the previous state, we can then create a Resource Group for virtual machines that will consume resources from the \"cluster\" Resource Group.  \"VMs\" is another Resource Group, with their own attributes named <code>vCPU</code> and <code>v_memory</code> that will consume respectively on attributes from the upper Resource Group \"cluster\" on <code>CPU</code> and <code>memory</code>.</p> <p></p> <p>If we want to add more VMs that consume resources from the \"cluster\" Resource Group, we need to be sure we have enough physical servers (resources) that produce into it.  </p>"},{"location":"manual/resource_tracking/concept/#kubernetes-tracking-example","title":"Kubernetes tracking example","text":"<p>In this example we want to track the consumption of an orchestrator of container like Kubernetes or Openshift.  Namespaces (or projects in Openshift world) are a way to divide cluster resources between multiple users by using  resource quota.</p> <p>Openshift and Kubernetes frameworks are commonly deployed in a virtual machines.  So we retrieve layers from previous example with bare metal servers that produce resources in a cluster of our hypervisor.</p> <p>Orchestrators are usually composed of 2 kind of node: Masters and Workers. Master VMs are used by the infrastructure itself and workers for user's workloads, aka namespaces.</p> <p>As namespaces are only executed in \"worker\" nodes, we need to declare 2 different resource group: \"Master\" and \"Worker\" VMs.</p> <p>The aggregation of resources of all workers compose amount of available resources that the <code>namespaces</code> resource group can theoretically consume.</p> <p>The complete resource tracking definition would look like the following:</p> <p></p> <p>With this definition, we are able to determine there is enough available resources in each layer to handle underlying objects.</p> <p>Adding a new namespace in the last resource group <code>K8S namespaces</code> will generate more consumption. If this last layer resource group is lacking of resources, adding more worker node in the <code>Worker VMs</code> resource  group will be required, generating consumption on the upper layer <code>Cluster</code> and so on...</p>"},{"location":"manual/resource_tracking/resource/","title":"Resources","text":"<p>A Resource is an instance of a Resource Group. One or more resource can be linked to the Service catalog \"instances\".</p>"},{"location":"manual/resource_tracking/resource/#link-a-service-catalog-instance","title":"Link a service catalog instance","text":"<p>Resources can be created from the API. It allows to create automatically a new resource in a resource group when  something is provisioned from the service catalog.</p> <p>In the example below, the playbook executed in RHAAP/AWX would have created a VM.  At the end of the process we call the squest API to instantiate a resource in the right resource group to reflect the  consumption. We link as well the pending instance(given by <code>squest.instance.id</code>) to this resource via the flag <code>service_catalog_instance</code>. <pre><code>- name: Add resource in resource group example\n  hosts: localhost\n  connection: local\n  gather_facts: false\n\n  vars:\n    squest_token: xxxxxxxxxxxxxx\n    squest_bearer_token: \"Bearer {{ squest_token }}\"\n    squest_api: \"http://127.0.0.1:8000/api/\"\n    resource_group_vm_id: 8\n    squest: # this would be the data sent from squest as extra vars\n      instance:\n        id: 8\n        name: test\n        service: 1\n        spec: { }\n        state: PROVISIONING\n    vm_name: \"test-vm\"\n    vm_vcpu: 4\n    vm_memory: 16\n    desc: \"My description\"\n\n  tasks:\n    - name: Print info sent by Squest\n      debug:\n        var: squest\n\n    # -----------------------\n    # PLACE HERE ALL THE MAGIC TO CREATE THE RESOURCE\n    # -----------------------\n    - name: Create a resource in squest\n      uri:\n        url: \"{{ squest_api }}resource-tracker/resource/\"\n        headers:\n          Authorization: \"{{ squest_bearer_token }}\"\n        method: POST\n        status_code: 201\n        body_format: json\n        body:\n          name: \"{{ vm_name }}\"\n          resource_group: \"{{ resource_group_vm_id }}\"\n          service_catalog_instance: \"{{ squest['instance']['id'] }}\"\n          resource_attributes:\n            - name: \"vCPU\"\n              value: \"{{ vm_vcpu }}\"\n            - name: \"Memory\"\n              value: \"{{ vm_memory }}\"\n</code></pre></p>"},{"location":"manual/resource_tracking/resource_group/","title":"Resource groups","text":"<p>In Squest, a resource group is a group of object(resource) that are composed by the same Attributes.</p> <p>Resource groups can be linked to consume from each other.</p>"},{"location":"manual/resource_tracking/resource_group/#attributes","title":"Attributes","text":"<p>Attributes are declared in the resource group as a definition of the generic object through a tansformer Each resource then created in the resource group may have to fill the value for each declared attribute.</p>"},{"location":"manual/resource_tracking/resource_group/#transformer","title":"Transformer","text":""},{"location":"manual/resource_tracking/resource_group/#consume-from-another-resource-group","title":"Consume from another Resource Group","text":"<p>Each attribute of a resource group can consume from another attribute of another resource group by using a Transformer.</p> <p>E.g: The <code>vCPU</code> attribute of the <code>VMS</code> resource group can consume form the <code>CPU</code> attribute of the \"cluster\" resource group.</p>"},{"location":"manual/resource_tracking/resource_group/#factor","title":"Factor","text":"<p>The factor act as an over commitment. It allows you to specify whether resources consume more or less than expected.</p> <p>For example, if a host has 28 core processors and hyperthreading is enabled, that host will produce 56 vCPUs (28 cores x 2 threads per core). This can be reflected by configuring the factor on the <code>vCPU</code> attribute to <code>2</code>.</p>"},{"location":"manual/resource_tracking/resource_group/#tags","title":"Tags","text":"<p>Tags are words that are attached to Resource Group and can then be used to filter the \"Graph\" representation of all Resource Group.</p> <p>Tags are intended to be used to specify identifying objects that are meaningful and relevant to users. Tags can be used to organize and select subsets of objects. Tags can be attached to objects at creation time and subsequently added and modified at any time.</p> <p>To add multiple tags:</p> <ul> <li> <p>If the input doesn't contain any commas or double quotes, it is simply treated as a space-delimited list of tag names.</p> </li> <li> <p>If the input does contain either of these characters:</p> <ul> <li> <p>Groups of characters which appear between double quotes take precedence as multi-word tags (so double quoted tag   names may contain commas). An unclosed double quote will be ignored.</p> </li> <li> <p>Otherwise, if there are any unquoted commas in the input, it will be treated as comma-delimited. If not, it will   be treated as space-delimited.</p> </li> </ul> </li> </ul> <p>Examples:</p> Tag input string Resulting tags Notes apple ball cat <code>[\"apple\", \"ball\", \"cat\"]</code> No commas, so space delimited apple, ball cat <code>[\"apple\", \"ball cat\"]</code> Comma present, so comma delimited \"apple, ball\" cat dog <code>[\"apple, ball\", \"cat\", \"dog\"]</code> All commas are quoted, so space delimited \"apple, ball\", cat dog <code>[\"apple, ball\", \"cat dog\"]</code> Contains an unquoted comma, so comma delimited apple \"ball cat\" dog <code>[\"apple\", \"ball cat\", \"dog\"]</code> No commas, so space delimited \"apple\" \"ball dog <code>[\"apple\", \"ball\", \"dog\"]</code> Unclosed double quote is ignored"},{"location":"manual/service_catalog/concept/","title":"Concept","text":"<p>Once Squest is linked to an RHAAP/AWX server, \"services\" can be added into the catalog.</p> <p>A service is composed of <code>operations</code> that are pointers to \"job templates\" present in RHAAP/AWX.</p> <p>A service has at least one operation of type <code>CREATE</code> that allows to provision the resource.</p> <p>A service can have then multiple operation of type <code>UPDATE</code> and <code>DELETE</code> that allow to manage the lifecycle of instances that have been created via the <code>CREATE</code> operation.</p>"},{"location":"manual/service_catalog/concept/#provisioning-a-service","title":"Provisioning a service","text":"<p>When a user request for the first time a service, an instance is created automatically and set to \"pending\" state on Squest. Once approved by the administrator, the request is sent to RHAAP/AWX to execute the linked job template.</p> <p>The executed job, aka the Ansible playbook, need to call back the Squest API in order to attach information (spec) to the pending instance.</p> <p>Squest provisioning workflow: sequenceDiagram     participant User     participant Admin     participant Squest     participant RHAAP/AWX     User-&gt;&gt;Squest: Request service     Admin-&gt;&gt;Squest: Approve     Admin-&gt;&gt;Squest: Process     Squest-&gt;&gt;RHAAP/AWX: Process     Squest--&gt;&gt;RHAAP/AWX: Check     Note right of RHAAP/AWX: Running     RHAAP/AWX-&gt;&gt;Squest: Instance spec &lt;br&gt; {'uuid': 34, 'name': 'instance_name'}     Squest--&gt;&gt;RHAAP/AWX: Check     Note right of RHAAP/AWX: Successful         Squest-&gt;&gt;User: Notify service ready</p> <p>The playbook will receive a <code>squest</code> extra variable that contains information of to the pending instance linked to the request in addition to all extra variables which come from the survey of the job template.</p> <p>Example of extra variables sent by Squest: <pre><code>squest:\n  squest_host: http://squest.domain.local\n  request:\n    instance:\n      id: 1\n      name: test\n      service: 1\n      spec:\n        file_name: foo.conf\n      state: PROVISIONING\n      spoc: 2\n</code></pre></p> <p>Specs related to the created instance are important in order to be sent later to a playbook in charge of updating this particular instance.</p> <p>Sent specs must contain unique IDs that allow to identify precisely the instance. (E.g: <code>uuid</code> of a VMware VM, <code>namespace</code> and <code>cluster_api_url</code> for an Openshift project)</p> <p>Playbook example:</p> <p>In the example below, we've configured a job template with a survey that ask for a variable named <code>file_name</code>. The playbook will:</p> <ul> <li>create the resource (the file)</li> <li>call Squest api to link spec of the created resource to the instance</li> </ul> <pre><code>- name: Create a file\n  hosts: localhost\n  connection: local\n  gather_facts: false\n\n  vars:\n    squest_token: 48c67f9c2429f2d3a1ee0e47daa00ffeef4fe744\n    squest_bearer_token: \"Bearer {{ squest_token }}\"\n    squest_api_url: \"http://192.168.58.128:8000/api/\"\n\n  tasks:\n    - name: Print the job template survey variable\n      debug:\n        var: file_name\n\n    - name: Print info sent by Squest\n      debug:\n        var: squest\n\n    - name: Create a file with the given file_name\n      ansible.builtin.file:\n        path: \"/tmp/{{ file_name }}\"\n        owner: user\n        group: user\n        mode: '0644'\n        state: touch\n\n    - name: Update spec of the instance via the squest API\n      uri:\n        url: \"{{ squest_api_url }}service-catalog/instance/{{ squest['request']['instance']['id'] }}/\" # do not forget the last slash\n        headers:\n          Authorization: \"{{ squest_bearer_token }}\"\n        method: PATCH\n        body:\n          spec:\n            file_name: \"{{ file_name }}\"\n        status_code: 200\n        body_format: json\n</code></pre>"},{"location":"manual/service_catalog/concept/#day-2-operations","title":"Day 2 operations","text":"<p>Day 2 operations are operations that update or delete existing resources.</p> <p>Note</p> <p>By default, recent version of RHAAP/AWX drop extra variables that are not declared in the survey. To be able to receive Squest extra vars you need to enable \"Prompt on Launch\" in the \"Variables\" section of you job template. This correspond to the flag \"ask_variables_on_launch\" of the job_template model on the RHAAP/AWX API.</p> <p>When a user creates a request for a day 2 operation of a provisioned instance, Squest automatically attach an <code>extra_vars</code> named <code>squest</code> that contains the instance spec sent by the playbook used to provision at first the resource.</p> <p>The playbook used to update the instance need to use info placed in <code>squest</code> variable to retrieve the real resource that need to be updated or deleted. The update playbook can send a new version of the instance to squest at the end of its process if required.</p> sequenceDiagram     participant User     participant Admin     participant Squest     participant RHAAP/AWX     User-&gt;&gt;Squest: Request update     Admin-&gt;&gt;Squest: Approve     Admin-&gt;&gt;Squest: Process     Squest-&gt;&gt;RHAAP/AWX: Process - Extra vars:&lt;br&gt; {'squest': {'uuid': 34, 'name': 'instance_name'}}     Squest--&gt;&gt;RHAAP/AWX: Check     Note right of RHAAP/AWX: Running     RHAAP/AWX-&gt;&gt;Squest: Instance spec update &lt;br&gt; {'uuid': 34, 'name': 'instance_new_name}     Squest--&gt;&gt;RHAAP/AWX: Check     Note right of RHAAP/AWX: Successful         Squest-&gt;&gt;User: Notify service updated <p>Playbook example:</p> <p>Example of extra vars sent by squest: <pre><code>squest:\n  squest_host: http://squest.domain.local\n  request:\n    instance:\n      id: 1\n      name: test-instance\n      service: 1\n      spec:\n        file_name: foo.conf\n      spoc: 2\n      state: UPDATING\nstring_to_place_in_file: \"this is a string\"\n</code></pre></p> <p>In the example below, the update job template survey ask for a <code>string_to_place_in_file</code> variable. The playbook receive as well all information that help to retrieve the resource to update. In this example the resource is the <code>file_name</code>. <pre><code>- name: Update content of a file\n  hosts: localhost\n  connection: local\n  gather_facts: false\n\n  tasks:\n    - name: Print the job template survey variable\n      debug:\n        var: string_to_place_in_file\n\n    - name: Print info sent by Squest\n      debug:\n        var: squest\n\n    - name: Add content into the file_name given by squest instance spec\n      ansible.builtin.lineinfile :\n        path: \"/tmp/{{ squest['request']['instance']['spec']['file_name'] }}\"\n        line: \"{{ string_to_place_in_file }}\"\n        create: yes\n</code></pre></p>"},{"location":"manual/service_catalog/docs/","title":"Docs","text":"<p>Docs section allow administrators to create and link documentation to Squest services or operations.</p> <p>Documentation are writen with Markdown syntax.</p> <p>Note</p> <p>Docs linked to a service or an operation are not listed in the global doc list from the sidebar menu.</p>"},{"location":"manual/service_catalog/docs/#linked-to-services","title":"Linked to services","text":"<p>When linked to one or more service, the documentation is shown in each \"instance detail\" page that correspond to the type of selected services.</p> <p>Jinja templating is supported with the <code>instance</code> as context.</p> <p>E.g: <pre><code>You instance is available at {{ instance.spec.dns }}\n</code></pre></p>"},{"location":"manual/service_catalog/docs/#linked-to-operations","title":"Linked to operations","text":"<p>When linked to one or more operation, the documentation is shown during the survey of the selected operations.</p> <p>Like for services, Jinja templating is supported with the <code>instance</code> as context.</p> <p>Note</p> <p>No instance context is injected on \"create\" operations as the instance doesn't exist yet at this stage</p>"},{"location":"manual/service_catalog/docs/#when-filter","title":"When filter","text":"<p>When filter can be applied to only show the documentation when some criteria based on the instance are respected.</p> <p>E.g: <pre><code>instance.user_spec.cluster_hostname == \"cluster-test.lab.local\"\n</code></pre></p>"},{"location":"manual/service_catalog/operation/","title":"Operation","text":"<p>An Operation is an action attached to a service that can be requested by the end user. A service in Squest has at least one operation of type \"create\" which allows to create an instance of the service. Operations of type \"update\" or \"delete\" can be then added to manage the lifecycle of created instances of the service.</p>"},{"location":"manual/service_catalog/operation/#configuration","title":"Configuration","text":"Name Description Name Short name of the operation Description Small description of the operation Job template Executed job template in the backend RHAAP/AWX server Operation type Type of operation (Create, update, delete). Change the state of he instance after executing the operation Process timeout Number of second to wait for a successful return from the executed job template Auto accept If set to <code>True</code> a submitted request for this operation will be automatically accepted Auto process If set to <code>True</code> an accepted request for this operation will be automatically processed Enabled If set to <code>True</code> the operation can be requested from the UI and API Admin operation If set to <code>True</code> the <code>admin_request_on_instance</code> permission is required to request this operation Extra vars Set of extra vars as JSON Default inventory ID ID of the RHAAP/AWX inventory to use by default.  Leave blank to use the default Job Template inventory Default limit Comma separated list of inventory host limits Default tags Comma separated list of tags to use Default skip tags Comma separated list of tags to skip Default verbosity Verbosity level (integer) Default job type Job type (Run or Check) Default diff mode Default <code>False</code>. This is equivalent to Ansible's --diff mode in the CLI Default credential IDs Comma separated list of credentials ID"},{"location":"manual/service_catalog/operation/#job-template-config","title":"Job template config","text":"<p>By default, Squest will execute the selected Job Template with the config as set in RHAAP/AWX. </p> <p>If a field is configured to \"Prompt on launch\" in RHAAP/AWX, the administrator can override it from the \"Process\" page of an accepted request:</p> <p>Overridable fields:</p> <ul> <li>Inventory (ID)</li> <li>Limit (hosts)</li> <li>Tags</li> <li>Skip tags</li> <li>Verbosity</li> <li>Job type</li> <li>Diff mode (Show changes)</li> <li>Credentials (Comma separated list of ID)</li> </ul> <p>The \"default\" configuration set at operation level allow to automatically pre-fill the \"Process\" page with values.</p> <p>Jinja templating can be used in the default value based on the current <code>{{ request }}</code> object as context. Examples can be retrieved in the dedicated documentation section. Full <code>request</code> object definition can be retrieved through the API documentation.</p> <p>Default value precedence:</p> flowchart LR     RHAAP/AWX(Default from RHAAP/AWX) --&gt; Squest(Default from Squest) --&gt; Process(Process request page) <p>Note</p> <p>Default inventory ID field is expecting an integer that correspond the the inventory ID in RHAAP/AWX.</p> <p>Default credential IDs field is expecting a comma separated list of integer that correspond existings credentials ID in RHAAP/AWX.</p>"},{"location":"manual/service_catalog/service/","title":"Service","text":"<p>A service in Squest is an item of the catalog. It contains at least one operation to create (or instantiate) the service and multiple day 2 operations to update or delete an already created instance of this service.</p>"},{"location":"manual/service_catalog/service/#configuration","title":"Configuration","text":"Name Description Name Short name of the service Description Small description of the operation Image Image used into the catalog Enabled If set to <code>True</code> the service is visible in the catalog External support URL Define an external support  tool URL Extra vars Set of extra vars as JSON Description documentation Markdown documentation linked to the service"},{"location":"manual/service_catalog/service/#external-support-url","title":"External support URL","text":"<p>Squest has an integrated support management. End user can open a support ticket on available instances. An external url can be defined as support tool in each service configuration. This allows to configure for example a redirection to services like GitHub issues or Jira.</p> <p>The external support URL support jinja templating to insert the current instance metadata as query parameters.</p> <p>E.g: <pre><code>http://my_external_tool.domain.local/?instance_name={{ instance.name }}?instance_id={{ instance.id }}?vm_os={{ instance.spec.vm_os }}\n</code></pre></p> <p>Example with Github issue query parameters: <pre><code>https://github.com/HewlettPackard/squest/issues/new?title=Templated+Github+issue&amp;body=Instance%3A+{{ instance.name }}\n</code></pre></p> <p>Note</p> <p>Special characters need to be converted into a format that can be transmitted over the Internet. URLs can only be sent over the Internet using the ASCII character-set.</p>"},{"location":"manual/service_catalog/service/#extra-vars","title":"Extra vars","text":"<p>Some extra variables can be declared on some Squest level like <code>tower_server</code>, <code>service</code> or <code>operation</code>.</p> <p>These extra variables are added automatically when processing a request and so executing a job template.</p> <p>If an extra variable is set with the same name in different places, the variable will be overridden following a certain order. Squest will apply the following variable precedence:</p> flowchart LR     survey(Request survey) --&gt; RHAAP/AWX(RHAAP/AWX) --&gt; Service(Service)  --&gt; Operation(Operation)"},{"location":"manual/service_catalog/survey/","title":"Survey","text":"<p>The survey of an operation in Squest is actually the one configured in the RHAAP/AWX job templates.</p> <p>Squest administrator can select which fields will be exposed to the end users when requesting a service or a day 2 operation.</p> <p>By default, the approval workflow is composed of 2 steps:</p> <ul> <li>Customer form (fields noted as 'customer field')</li> <li>Admin form (All fields of the job template)</li> </ul> <p>If more steps are needed, you can create a dedicated approval workflow.</p>"},{"location":"manual/service_catalog/survey/#is-customer-field","title":"Is customer field","text":"<p>A customer field  is a field that will be displayed into the end user survey. By default, all fields are enabled when creating a new operation.</p> <p>Fields that are not customer fields can be filled by any users who have the accept_request permission.</p> <p>Note</p> <p>If the field is set as required into the RHAAP/AWX job template survey config then the administrator will have to fill it in any case during the review of the request.</p>"},{"location":"manual/service_catalog/survey/#default-value","title":"Default value","text":"<p>When set, the default value is pre-filled into the final form. It takes precedence over the default value set in RHAAP/AWX job template survey config.</p> <p>Default value precedence:</p> flowchart LR     RHAAP/AWX(Default from RHAAP/AWX) --&gt; squest(Default from Squest value) --&gt; User(User's input)  --&gt; Admin(Admin's input) <p>Note</p> <p>When used with a 'multiple select' or 'multiple select multiple' type of field, the value need to be a valid one from the RHAAP/AWX survey field options.</p> <p>Jinja templating</p> <p>Jinja templating can be used in the default value based on the current <code>{{ instance }}</code> and <code>{{ user }}</code> objects as context. Examples can be retrieved in the dedicated documentation section.</p> <p>Full <code>instance</code> and <code>user</code>object definition can be retrieved through the API documentation.</p>"},{"location":"manual/service_catalog/survey/#validators","title":"Validators","text":"<p>SurveyValidator are python modules that can be added as plugins to perform a custom check on your form. See related documentation here.</p>"},{"location":"manual/service_catalog/survey/#attribute-definition","title":"Attribute definition","text":"<p>Each field can be linked to an Attribute definition from the resource tracking. This allows to automatically limit the field value to a quota. The available quota is shown in the form of the request so the end user know what he can still consume.</p> <p></p>"}]}