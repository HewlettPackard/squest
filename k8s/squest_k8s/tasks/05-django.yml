- name: Create a service account for Squest
  kubernetes.core.k8s:
    namespace: "{{ squest_namespace }}"
    state: present
    definition:
      kind: ServiceAccount
      apiVersion: v1
      metadata:
        name: squest-sa
        labels:
          app: squest
          service: django
      automountServiceAccountToken: true

- name: Create a role allowed to get info on jobs
  kubernetes.core.k8s:
    namespace: "{{ squest_namespace }}"
    state: present
    definition:
      kind: Role
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: role-get-jobs
        labels:
          app: squest
          service: django
      rules:
        - verbs:
            - list
            - watch
            - get
          apiGroups:
            - batch
          resources:
            - jobs

- name: Link Squest service account to role
  kubernetes.core.k8s:
    namespace: "{{ squest_namespace }}"
    state: present
    definition:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: django-role-binding
        labels:
          app: squest
          service: django
      subjects:
        - kind: ServiceAccount
          name: squest-sa
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: role-get-jobs

- name: Django env as config map
  kubernetes.core.k8s:
    namespace: "{{ squest_namespace }}"
    apply: true
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: squest
          service: django
        name: django-env
      data: "{{ squest_django.env }}"

- when: squest_django.env_secrets is defined
  name: Create generic secrets
  kubernetes.core.k8s:
    namespace: "{{ squest_namespace }}"
    definition: "{{ lookup('template', 'squest_secrets.yaml') | from_yaml }}"

- name: Persistent volume for static, media and backup
  loop: "{{ squest_django.pvc | dict2items }}"
  kubernetes.core.k8s:
    namespace: "{{ squest_namespace }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        labels:
          app: squest
          service: django
        name: "{{ item.key }}"
      spec:
        storageClassName: "{{ item.value['storage_class_name'] }}"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ item.value['size'] }}"

- name: Django database migration job
  kubernetes.core.k8s:
    state: present
    namespace: "{{ squest_namespace }}"
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: django-migrations
        labels:
          app: squest
          service: django
      spec:
        template:
          backoffLimit: 3
          spec:
            securityContext:
              fsGroup: 999
            containers:
              - name: django
                image: "{{ squest_django.image }}"
                command: ['/bin/bash', '-c']
                args:
                  - |
                    echo $UID
                    echo $USER
                    echo "Applying database migration"
                    python manage.py migrate --database=${DATABASE:-default}
                    echo ""
                    echo "-----------------------------------------------------"
                    echo "Collect static files"
                    python manage.py collectstatic --noinput
                    echo ""
                    echo "-----------------------------------------------------"
                    echo "Inserting default data"
                    python manage.py insert_default_data
                envFrom:
                  - configMapRef:
                      name: django-env
                env:
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: mariadb
                        key: mariadb-password
                volumeMounts:
                  - mountPath: /app/static
                    name: django-static
            restartPolicy: Never
            volumes:
              - name: django-static
                readOnly: true
                persistentVolumeClaim:
                  claimName: django-static

- name: Wait until migration job done
  kubernetes.core.k8s_info:
    api_version: "batch/v1"
    kind: Job
    name: "django-migrations"
    namespace: "{{ squest_namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: Complete
      status: "True"

- name: Nginx config
  kubernetes.core.k8s:
    state: present
    namespace: "{{ squest_namespace }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: "{{ squest_namespace }}"
        labels:
          app: squest
          service: nginx
        name: nginx-config
      data:
        nginx.conf: "{{ lookup('file', playbook_dir + '/../docker/nginx.conf') }}"

- when: squest_django.ldap is defined and squest_django.ldap.enabled
  name: LDAP config
  kubernetes.core.k8s:
    state: present
    namespace: "{{ squest_namespace }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        labels:
          app: squest
          service: ldap
        name: ldap-config
      data:
        ldap_config.py: |
          {% if 'ldap_config_file' in squest_django.ldap %}
          {{ squest_django.ldap.ldap_config_file }}
          {% else %}
          {{ lookup('file', playbook_dir + '/../Squest/ldap_config.py') }}
          {% endif %}            

- name: Deploy Django app
  kubernetes.core.k8s:
    state: present
    namespace: "{{ squest_namespace }}"
    apply: true
    definition: "{{ lookup('template', 'django.deployment.yaml') | from_yaml }}"

- name: Django service
  kubernetes.core.k8s:
    state: present
    namespace: "{{ squest_namespace }}"
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: django
      spec:
        selector:
          app: squest
          service: django
        ports:
          - protocol: TCP
            port: 8080
            targetPort: 8080

- when: squest_django.ingress.enabled
  name: Squest ingress
  kubernetes.core.k8s:
    state: present
    namespace: "{{ squest_namespace }}"
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        labels:
          app: squest
          service: django
        name: squest-ingress
        annotations: "{{ squest_django.ingress.annotations }}"
      spec:
        ingressClassName: "{{ squest_django.ingress.classname }}"
        rules:
          - host: "{{ squest_django.ingress.host }}"
            http:
              paths:
                - pathType: Prefix
                  path: "/"
                  backend:
                    service:
                      name: django
                      port:
                        number: 8080

- name: Wait until Django deployment available
  kubernetes.core.k8s_info:
    api_version: "apps/v1"
    kind: Deployment
    name: "django"
    namespace: "{{ squest_namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: Available
      status: "True"
