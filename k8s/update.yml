- name: "Update Squest"
  hosts: localhost
  gather_facts: false
  module_defaults:
    kubernetes.core.k8s:
      kubeconfig: "{{ k8s_kubeconfig_path }}"
    kubernetes.core.k8s_info:
      kubeconfig: "{{ k8s_kubeconfig_path }}"

  tasks:
    - when: k8s_kubeconfig_path is undefined
      name: 'Fail if k8s_kubeconfig_path is not defined'
      ansible.builtin.fail:
        msg: 'Please make sure you set k8s_kubeconfig_path'

    - when: squest_django.ingress.enabled
      name: Update ingress to point to maintenance pod
      kubernetes.core.k8s:
        state: patched
        namespace: "{{ squest_namespace }}"
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: squest-ingress
            annotations: "{{ squest_django.ingress.annotations }}"
          spec:
            ingressClassName: "{{ squest_django.ingress.classname }}"
            rules:
              - host: "{{ squest_django.ingress.host }}"
                http:
                  paths:
                    - pathType: Prefix
                      path: "/"
                      backend:
                        service:
                          name: maintenance
                          port:
                            number: 80

    - name: Update Django env config map
      kubernetes.core.k8s:
        namespace: "{{ squest_namespace }}"
        state: patched
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            labels:
              app: squest
              service: django
            name: django-env
          data: "{{ squest_django.env }}"

    - name: Delete migration job
      kubernetes.core.k8s:
        namespace: "{{ squest_namespace }}"
        kind: Job
        api_version: batch/v1
        name: "django-migrations"
        state: absent

    - name: Create back Django database migration job
      kubernetes.core.k8s:
        apply: true
        namespace: "{{ squest_namespace }}"
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: django-migrations
            labels:
              app: squest
              service: django
          spec:
            template:
              backoffLimit: 3
              spec:
                securityContext:
                  fsGroup: 999
                containers:
                  - name: django
                    image: "{{ squest_django.image }}"
                    command: ['/bin/bash', '-c']
                    args:
                      - |
                        echo $UID
                        echo $USER
                        echo "Applying database migration"
                        python manage.py migrate --database=${DATABASE:-default}
                        echo ""
                        echo "-----------------------------------------------------"
                        echo "Collect static files"
                        python manage.py collectstatic --noinput
                        echo ""
                        echo "-----------------------------------------------------"
                        echo "Inserting default data"
                        python manage.py insert_default_data
                    envFrom:
                      - configMapRef:
                          name: django-env
                    env:
                      - name: DB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: mariadb
                            key: mariadb-password
                      - name: RABBITMQ_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: rabbitmq
                            key: rabbitmq-password
                      - name: REDIS_CACHE_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: redis
                            key: redis-password
                    volumeMounts:
                      - mountPath: /app/static
                        name: django-static
                      - mountPath: /app/media
                        name: django-media
                restartPolicy: Never
                volumes:
                  - name: django-media
                    persistentVolumeClaim:
                      claimName: django-media
                  - name: django-static
                    persistentVolumeClaim:
                      claimName: django-static

    - name: Wait until migration job done
      kubernetes.core.k8s_info:
        api_version: "batch/v1"
        kind: Job
        name: "django-migrations"
        namespace: "{{ squest_namespace }}"
        wait: true
        wait_sleep: 10
        wait_timeout: 600
        wait_condition:
          type: Complete
          status: "True"

    - name: Update Squest images and force rollout
      loop:
        - django
        - celery-worker
        - celery-beat
      kubernetes.core.k8s:
        namespace: "{{ squest_namespace }}"
        kind: Deployment
        name: "{{ item }}"
        state: patched
        definition:
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ now(fmt='%Y-%m-%dT%H:%M:%SZ') }}"
              spec:
                containers:
                  - name: "{{ item }}"
                    image: "{{ squest_django.image }}"

    - name: Wait until deployments back available
      loop:
        - django
        - celery-worker
        - celery-beat
      kubernetes.core.k8s_info:
        api_version: "apps/v1"
        kind: Deployment
        name: "{{ item }}"
        namespace: "{{ squest_namespace }}"
        wait: true
        wait_sleep: 10
        wait_timeout: 600
        wait_condition:
          type: Available
          status: "True"

    - when: squest_django.ingress.enabled
      name: Restore ingress
      kubernetes.core.k8s:
        state: patched
        namespace: "{{ squest_namespace }}"
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: squest-ingress
            annotations: "{{ squest_django.ingress.annotations }}"
          spec:
            ingressClassName: "{{ squest_django.ingress.classname }}"
            rules:
              - host: "{{ squest_django.ingress.host }}"
                http:
                  paths:
                    - pathType: Prefix
                      path: "/"
                      backend:
                        service:
                          name: django
                          port:
                            number: 8080
